#################################################################
# SSU-align
# top level Makefile: installation, documentation
# CVS $Id: Makefile.in 2581 2008-09-18 13:37:59Z eddys $
#################################################################
# @LICENSE@
#################################################################

# On most Unices, you can build the package without modifying anything 
#   by just typing "./configure; make".
#
# Post-configuration, you may still want to modify the following make variables:
#   BINDIR  - where the executables will be installed by a 'make install'
#   MANDIR  - where the man pages will be installed by a 'make install'
#   CC      - which compiler to use
#   CFLAGS  - compiler flags to use

# where you want things installed
# Sort of uses GNU coding standards. ${prefix} might be /usr/local.
# ${exec_prefix} gives you some flexibility for installing architecture
# dependent files (e.g. the programs): an example ${exec_prefix} might be
# /nfs/share/irix64/
#
prefix      = @prefix@
exec_prefix = @exec_prefix@
BINDIR      = @bindir@
MANDIR      = @mandir@
datarootdir = @datarootdir@
datadir     = @datadir@

# how to install the man pages; 
# cp is generally fine, unless you preformat your pages.
#
INSTMAN   = cp
MANSUFFIX = 1

# your compiler and compiler flags
#
CC        = @CC@
CFLAGS    = @CFLAGS@
SIMDFLAGS = @SIMD_CFLAGS@

#######
## You should not need to modify below this line.
## Some of it is concerned with maintenance of the development version
## and building the release (indeed, several commands will only work at
## Janelia)
#######
SHELL       = /bin/sh
PACKAGE     = @PACKAGE_NAME@
BASENAME    = @PACKAGE_TARNAME@
RELEASE     = @PACKAGE_VERSION@
RELEASEDATE = "@PACKAGE_DATE@"
COPYRIGHT   = "@PACKAGE_COPYRIGHT@"
LICENSELINE = "@PACKAGE_LICENSE@"
LICENSETAG  = gnu
COMPRESS    = gzip
REPOSITORY  = https://svn.janelia.org/eddylab/eddys/src/


PROGS = ssu-align\
#	ssu-draw\
	ssu-mask\

INFPROGS = ssu-cmalign\
	   ssu-cmbuild\
           ssu-cmsearch\

ESLPROGS = ssu-esl-alimanip\
	   ssu-esl-seqstat\
	   ssu-esl-sfetch\
	   ssu-esl-ssdraw\
	   ssu-esl-weight\

# List of the files to be copied to the lib/ directory.
#
SEEDLIBFILES = ssu3-0p1.cm\
	       archaea-0p1.cm\
	       bacteria-0p1.cm\
	       eukarya-0p1.cm

PSLIBFILES = archaea-0p1.ps\
	     bacteria-0p1.ps\
	     eukarya-0p1.ps

# all: if we don't have precompiled binaries, compiles all packages, 
#      and moves the supported executables into binaries/ subdirectory.
#
#all: core 
all: core 

core:
	(cd easel;        make CC="$(CC)" CFLAGS="$(CFLAGS)"; make ssu)
	(cd infernal/src; make CC="$(CC)" CFLAGS="$(CFLAGS)"; make ssu)
#
# we don't need to cd src; and make, because the src/ execs are perl scripts.
#	(cd src;          make CC="$(CC)" CFLAGS="$(CFLAGS)"; make)
#	(cd testsuite;    make CC="$(CC)" CFLAGS="$(CFLAGS)")

# dist: build a new distribution directory in ssu-align-$RELEASE
#
dist:
	# Make sure we pointed the make dist to a subversion repository
	@if test x${REPOSITORY} = 'x'; then\
	  echo "REPOSITORY isn't set; use make REPOSITORY=... dist";\
	  exit 1;\
	fi
	# Delete old versions of the same release
	#
	@if test -d ../${BASENAME}-$(RELEASE);        then rm -rf ../${BASENAME}-$(RELEASE);        fi
	@if test -e ../${BASENAME}-$(RELEASE).tar;    then rm -f  ../${BASENAME}-$(RELEASE).tar;    fi
	@if test -e ../${BASENAME}-$(RELEASE).tar.Z;  then rm -f  ../${BASENAME}-$(RELEASE).tar.Z;  fi
	@if test -e ../${BASENAME}-$(RELEASE).tar.gz; then rm -f  ../${BASENAME}-$(RELEASE).tar.gz; fi
	# 
	# Export the release from Subversion control.
        # Because we use svn:externals, this automatically exports 
	# the Infernal, ssdk, and Easel libraries as well.
	#
	svn export ${REPOSITORY} ../${BASENAME}-${RELEASE}
	# 
	# Make the configure scripts from configure.ac
	#
	(cd ../${BASENAME}-${RELEASE};          autoconf)
	(cd ../${BASENAME}-${RELEASE}/easel;    autoconf)
	(cd ../${BASENAME}-${RELEASE}/infernal; autoconf)
	#
	# We'll need a basic Makefiles for some steps; later
	# we'll delete them
	#
	(cd ../${BASENAME}-${RELEASE}/; ./configure)
	#
	# Make symlinks and set file permissions
	#
	(cd ../${BASENAME}-${RELEASE}/testsuite; ln -s ../easel/devkit/sqc .)
	find ../${BASENAME}-${RELEASE} -type f -exec chmod +r {} \;
	chmod +x ../${BASENAME}-${RELEASE}/easel/devkit/sqc
	chmod +x ../${BASENAME}-${RELEASE}/easel/devkit/autodoc
	#
	# Attach license stamps on all files that need 'em
	# (e.g. replace LICENSE keyword everywhere)
	#
	find ../${BASENAME}-${RELEASE} -type f -exec easel/devkit/sedition-pp LICENSE Licenses/$(LICENSETAG) {} \;
	#
	# Other keyword replacements
	#
	easel/devkit/sedition RELEASE ${RELEASE} RELEASEDATE ${RELEASEDATE}                        ../${BASENAME}-${RELEASE}/documentation/userguide/titlepage.tex
	easel/devkit/sedition RELEASE ${RELEASE} RELEASEDATE ${RELEASEDATE} COPYRIGHT ${COPYRIGHT} ../${BASENAME}-${RELEASE}/00README
	for manpage in ../${BASENAME}-${RELEASE}/documentation/manpages/*; do\
	   easel/devkit/sedition RELEASE ${RELEASE} RELEASEDATE ${RELEASEDATE} COPYRIGHT ${COPYRIGHT} PACKAGE ${PACKAGE} LICENSELINE ${LICENSELINE} $$manpage;\
	done
	#
	# Make the User's Guide, and copy to top level. (We'll
	# destroy the userguide source soon.)
	#
	(cd ../${BASENAME}-${RELEASE}/documentation/userguide; make pdf)
	cp ../${BASENAME}-${RELEASE}/documentation/userguide/main.pdf  ../${BASENAME}-${RELEASE}/Userguide.pdf
	# 
	# Finish the man pages off, adding necessary boilerplate.
	# Must be done *after* the user guide is created, since the user guide
	# steals and uses the pre-boilerplate man pages.
	# Include the optional rigfilters documentation too; whether the user
	# wants it or not is a configuration-time decision.
	#
	for prog in $(PROGS); do\
	   cat ../${BASENAME}-${RELEASE}/documentation/manpages/boilerplate.trailer >> ../${BASENAME}-${RELEASE}/documentation/manpages/$$prog.man;\
	done
	-rm -f ../${BASENAME}-${RELEASE}/documentation/manpages/boilerplate.trailer
	#
	# Remove SVN-controlled files/directories that don't belong in the
	# distro
	#
	-rm -rf ../${BASENAME}-${RELEASE}/Licenses
	-rm -rf ../${BASENAME}-${RELEASE}/00CHECKLIST
	-rm -rf ../${BASENAME}-${RELEASE}/Bugs
	-rm -rf ../${BASENAME}-${RELEASE}/Manuscripts
	-rm -rf ../${BASENAME}-${RELEASE}/SUBPACKAGES
	-rm -rf ../${BASENAME}-${RELEASE}/00WISHLIST
	(cd ../${BASENAME}-${RELEASE}/easel; make implode)
	(cd ../${BASENAME}-${RELEASE}/;      make distclean)
	#
	# Packaging commands
	#
	(cd ..;	tar cvf ${BASENAME}-${RELEASE}.tar ${BASENAME}-${RELEASE})
	(cd ..; $(COMPRESS) ${BASENAME}-$(RELEASE).tar)

# "make check" runs a set of sqc exercises in the test suite, at level 4.
# To run faster, reduce the level (level 1 runs a few tests, level 4
# runs a lot). 
#
check:
	(cd testsuite; ./sqc -p ../easel/miniapps 4 exercises.sqc . ../src)

# "make devcheck" runs an additional set of development sqc exercises 
# in the test suite, at level 4. This will take a long time.
#
devcheck:
	(cd testsuite;\
	 ./sqc -p ../src/           4 esl-alimanip.sqc . ../easel/miniapps/;\
	 ./sqc -p ../easel/miniapps 4 cmalign.sqc      . ../src;\
	 ./sqc -p ../easel/miniapps 4 cmbuild.sqc      . ../src;\
	 ./sqc -p ../easel/miniapps 4 cmcalibrate.sqc  . ../src;\
	 ./sqc -p ../easel/miniapps 4 cmemit.sqc       . ../src;\
	 ./sqc -p ../easel/miniapps 4 cmscore.sqc      . ../src;\
	 ./sqc -p ../easel/miniapps 4 cmsearch.sqc     . ../src;\
	 ./sqc -p ../easel/miniapps 4 cmstat.sqc       . ../src;)

# "make install" installs the programs in BINDIR and the CM and postscript templates in LIBDIR
#
install: actually-install ssu-align setpaths

actually-install:
	mkdir -p ${BINDIR}
	for file in $(PROGS); do\
		cp src/$$file $(BINDIR)/;\
	done
	for file in $(INFPROGS); do\
		cp infernal/src/$$file $(BINDIR)/;\
	done
	for file in $(ESLPROGS); do\
		cp easel/miniapps/$$file $(BINDIR)/;\
	done
	mkdir -p ${datadir}/${BASENAME}-${RELEASE}
	for file in $(SEEDLIBFILES); do\
		cp seeds/$$file ${datadir}/${BASENAME}-${RELEASE}/;\
	done
	for file in $(PSLIBFILES); do\
		cp seeds/ss-diagrams/$$file ${datadir}/${BASENAME}-${RELEASE}/;\
	done

ssu-align:
#	$(PERLDIR)/$(PERLBIN) checkversion.pl
#	sed 's#/tmp#$(TEMPDIR)#g' tRNAscan-SE.src | \
#	sed 's#bindir = ""#bindir =\"$(BINDIR)/"#g' | \
#	sed 's#/usr/local/lib/tRNAscanSE#$(LIBDIR)#g' | \
#	sed 's#version = ""#version = $(SE_RELEASE)#' | \
#	sed 's#release_date = ""#release_date = $(RELEASEDATE)#' | \
#	sed 's#/usr/bin/perl#$(PERLDIR)/$(PERLBIN)#' > tRNAscan-SE
#	sed 's#/usr/bin/perl#$(PERLDIR)/$(PERLBIN)#' instman.pl > instman 
#	sed 's#/usr/bin/perl#$(PERLDIR)/$(PERLBIN)#' sstofa.pl > sstofa 
#	@chmod +x tRNAscan-SE
#	@chmod +x instman
	@echo ""
	@echo "SSU-ALIGN built"
	@echo ""
	@echo ""

setpaths:
#	@echo 'setenv PATH "$$PATH"":""$(BINDIR)"' > setup.ssu-align.csh
	@echo 'setenv PATH "$$PATH:$(BINDIR)"' > setup.ssu-align.csh
	@echo 'export PATH="$$PATH:$(BINDIR)"' > setup.ssu-align.bash
	@echo 'setenv MANPATH "$$MANPATH:$(MANDIR)"' >> setup.ssu-align.csh
	@echo 'export MANPATH="$$MANPATH:$(MANDIR)"' >> setup.ssu-align.bash
	@echo 'setenv SSUALIGNDIR "$(datadir)/$(BASENAME)-$(RELEASE)"' >> setup.ssu-align.csh
	@echo 'export SSUALIGNDIR="$(datadir)/$(BASENAME)-$(RELEASE)"' >> setup.ssu-align.bash
	@echo ""
	@echo "The files \"setup.ssu-align.bash\" and \"setup.ssu-align.csh\" have been created."
	@echo "If you use the bash shell, type \"source setup.ssu-align.bash; rehash\"."
	@echo "If you use the C shell, type \"source setup.ssu-align.csh; rehash\"."
	@echo "This will update your environment for this session."
	@echo ""
	@echo "To update your environment upon every login, you should"
	@echo "add the line:"
	@echo ""
	@echo "source $(PWD)/setup.ssu-align.bash"
	@echo ""
	@echo "to your \".bashrc\" file."
	@echo ""
	@echo "or"
	@echo ""
	@echo "source $(PWD)/setup.ssu-align.csh"
	@echo ""
	@echo "to your \".cshrc\" file."
	@echo ""
	@echo "To determine which shell you use, type:"
	@echo ""
	@echo "echo $$SHELL"
	@echo ""
	@echo "If you prefer to manually update your environment variables,"
	@echo "be sure to make the following changes:"
	@echo ""
	@echo "1. Add $(BINDIR) to your PATH variable"
	@echo "2. Add $(MANDIR) to your MANPATH variable"
	@echo "3. Set $$SSUALIGNDIR as $(datadir)/$(BASENAME)-$(RELEASE)"
	@echo ""

# "make clean" removes almost everything except configuration files
#              and binaries.
clean:
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out
	(cd infernal/testsuite;      make clean)
	(if cd documentation/userguide; then make clean; fi)
	(cd src;                     make clean)
	(cd infernal/src;            make clean)
	(cd easel;                   make clean)

# "make distclean" leaves a pristine source distribution.
#
distclean:
	-rm -f  config.cache config.log config.status
	-rm -rf autom4te.cache
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out
#	(cd testsuite;               make distclean)
	(if cd documentation/userguide; then make distclean; fi)
	(cd src;                     make distclean)
	(cd easel;                   make distclean)
	(cd infernal/src;            make distclean)
	-rm Makefile
