#!/usr/bin/perl
#
# ssu-align
# Eric Nawrocki
# EPN, Wed Oct 29 10:12:05 2008
#
# Usage: ssu-align [options] <target database sequence file name> <output root for output files>
#             
# Synopsis:
#
# Aligns SSU sequences to SSU CMs.
# Given a CM file with >=1 SSU CMs and a target sequence file with putative
# SSU sequences: 
#
# Step 1. Define likely start/ends (seq boundaries) to align using cmsearch 
#         in viterbi HMM mode (or forward HMM mode if --forward).
# Step 2. Extract those subsequences into a new target fasta file using
#         esl-sfetch.
# Step 3. Align sequences in new fasta file from step 2 to the corresponding CM
#         using cmalign.
#
# If x CMs exist, with x > 1, in the CM file, then x new subsequence files 
# are created in Step 2, one for each CM and containing the sequences that
# score highest to that CM. Then in Step 3, each CM is used to align its 
# target file. For example the CM file may contain archael, bacterial, and 
# eukaryotic CMs, and step 1 will 'classify' each seq as arc, bac, or euk, 
# and then in Step 3 the appropriate CM is used to align each sequence. 
#
# See definition of $options_usage for options, below.
#
use Getopt::Long;
use Cwd 'abs_path';
use strict;

my $total_time = -1 * time();
my $usage = "Usage: ssu-align [-options] <sequence file> <output dir and file name root>\n";
my $options_usage  = "where general options are:\n";
#                           1         2         3         4         5         6         7         8
#                  12345678901234567890123456789012345678901234567890123456789012345678901234567890
$options_usage .= "  -h     : show brief help on version and usage\n";
$options_usage .= "  -1     : output alignments in non-interleaved, 1 line/seq format\n";
$options_usage .= "  -m <s> : use CM file <f> instead of the default CM file\n";
$options_usage .= "  -F     : force; if <output dir> already exists - empty it and fill it\n" ,
$options_usage .= "  -b <f> : set minimum bit score of a surviving subsequence as <f> (default: 100)\n";
$options_usage .= "  -l <n> : set minimum length    of a surviving subsequence as <n> (default: 1)\n";

$options_usage .= "\noptions for running ssu-align in 'prep' mode to split up a large job:\n";
$options_usage .= "  --prep-n <n> : split target seq file into multiple files with <n> seqs each\n";
$options_usage .= "  --prep-p <n> : split target seq file into <n> files with equal number of seqs\n";

$options_usage .= "\noptions for skipping either the 1st (search) stage or 2nd (alignment) stage)\n";
$options_usage .= "  --no-align  : only search target sequence file for hits, skip alignment step\n";
$options_usage .= "  --no-search : only align  target sequence file, skip initial search step\n"; 

$options_usage .= "\nexpert options for tuning the initial search stage:\n";
$options_usage .= "  --no-trunc : do not truncate seqs to HMM predicted start/end, align full seqs\n";
$options_usage .= "  --toponly  : only search the top strand [default: search both strands]\n";
$options_usage .= "  --forward  : use the HMM forward algorithm for searching, not HMM viterbi\n";
$options_usage .= "  --global   : search with globally configured HMM [default: local]\n";

$options_usage .= "\nexpert options for tuning the alignment stage:\n";
$options_usage .= "  --filter <f> : filter aln based on seq identity, allow no 2 seqs > <f> identical\n";
$options_usage .= "  --no-prob    : DO NOT append posterior probabilities to alignments\n";
$options_usage .= "  --mxsize <f> : increase mx size for cmalign to <f> Mb (default: 4096)\n";

###################
# Process options #
###################
my %opt_H = ();              # key: option (example "-h"); value: option argument (example ("0" or "1") if option takes no arg, actual argument if option takes arg)
my %opt_takes_arg_H  = ();   # key: option; value: "1" if option takes argument, "0" if not
my @opt_order_A  = ();       # order of options for printing in banner
my %opt_is_prep_H = ();      # key: option; value: "1" if option will get passed to child ssu-align calls in prep mode, "0" if not
my $opt;

$opt_takes_arg_H{"-h"}          = 0;  push(@opt_order_A, "-h");           $opt_is_prep_H{"-h"}          = 0;
$opt_takes_arg_H{"-1"}          = 0;  push(@opt_order_A, "-1");           $opt_is_prep_H{"-1"}          = 1;
$opt_takes_arg_H{"-m"}          = 1;  push(@opt_order_A, "-m");           $opt_is_prep_H{"-m"}          = 1;
$opt_takes_arg_H{"-F"}          = 0;  push(@opt_order_A, "-F");           $opt_is_prep_H{"-F"}          = 0;
$opt_takes_arg_H{"-b"}          = 1;  push(@opt_order_A, "-b");           $opt_is_prep_H{"-b"}          = 1;
$opt_takes_arg_H{"-l"}          = 1;  push(@opt_order_A, "-l");           $opt_is_prep_H{"-l"}          = 1;
$opt_takes_arg_H{"--prep-n"}    = 1;  push(@opt_order_A, "--prep-n");     $opt_is_prep_H{"--prep-n"}    = 0;
$opt_takes_arg_H{"--prep-p"}    = 1;  push(@opt_order_A, "--prep-p");     $opt_is_prep_H{"--prep-p"}    = 0;
$opt_takes_arg_H{"--no-align"}  = 0;  push(@opt_order_A, "--no-align");   $opt_is_prep_H{"--no-align"}  = 1;
$opt_takes_arg_H{"--no-search"} = 0;  push(@opt_order_A, "--no-search");  $opt_is_prep_H{"--no-search"} = 1;
$opt_takes_arg_H{"--no-trunc"}  = 0;  push(@opt_order_A, "--no-trunc");   $opt_is_prep_H{"--no-trunc"}  = 1;
$opt_takes_arg_H{"--toponly"}   = 0;  push(@opt_order_A, "--toponly");    $opt_is_prep_H{"--toponly"}   = 1;
$opt_takes_arg_H{"--forward"}   = 0;  push(@opt_order_A, "--forward");    $opt_is_prep_H{"--forward"}   = 1;
$opt_takes_arg_H{"--global"}    = 0;  push(@opt_order_A, "--global");     $opt_is_prep_H{"--global"}    = 1;
$opt_takes_arg_H{"--filter"}    = 1;  push(@opt_order_A, "--filter");     $opt_is_prep_H{"--filter"}    = 1;
$opt_takes_arg_H{"--no-prob"}   = 0;  push(@opt_order_A, "--no-prob");    $opt_is_prep_H{"--no-prob"}   = 1;
$opt_takes_arg_H{"--mxsize"}    = 1;  push(@opt_order_A, "--mxsize");     $opt_is_prep_H{"--mxsize"}    = 1;

#set default options
foreach $opt (keys %opt_takes_arg_H) { 
    if($opt_takes_arg_H{$opt}) { $opt_H{$opt} = ""; }
    else                       { $opt_H{$opt} = 0; }
}

# the only global variables, defaults and special strings
our $df_min_bit = 100;
our $df_min_len = 1;
our $df_mxsize = 4096;
our $df_cmsearch_T = -1;
our $df_none_name = "<NONE>";

Getopt::Long::Configure ("bundling");
my $opt_return = GetOptions
    ('h'         => \$opt_H{"-h"}, 
     '1'         => \$opt_H{"-1"},
     'm=s'       => \$opt_H{"-m"},
     'F'         => \$opt_H{"-F"},
     'b=f'       => \$opt_H{"-b"},
     'l=n'       => \$opt_H{"-l"},
     'prep-n=n'  => \$opt_H{"--prep-n"},
     'prep-p=n'  => \$opt_H{"--prep-p"},
     'no-align'  => \$opt_H{"--no-align"},
     'no-search' => \$opt_H{"--no-search"},
     'no-trunc'  => \$opt_H{"--no-trunc"},
     'toponly'   => \$opt_H{"--toponly"},
     'forward'   => \$opt_H{"--forward"},
     'global'    => \$opt_H{"--global"},
     'filter=f'  => \$opt_H{"--filter"},
     'no-prob'   => \$opt_H{"--no-prob"},
     'mxsize'    => \$opt_H{"--mxsize"});

if($opt_return != 1) { exit(1); }

my $prep_enabled_options;
if ($opt_H{"-h"}) { 
    print_banner($0, \%opt_H, \%opt_takes_arg_H, \@opt_order_A, \%opt_is_prep_H, \@ARGV, \$prep_enabled_options, ""); 
    # passing "" as last arg tells print_banner not to print banner to a file (usually it does, to the ssu-align output file)
    print $usage . "\n"; 
    print $options_usage; 
    exit(1);  
}

# Check for incompatible option combinations.
if(($opt_H{"--no-align"}) && 
   (($opt_H{"--filter"} ne '') ||
    ($opt_H{"-1"})             ||
    ($opt_H{"--no-prob"})      ||
    ($opt_H{"--mxsize"}))) { 
    printf STDERR ("\nERROR, --no-align is incompatible with alignment-specific options: -1,--filter,--no-prob, and --mxsize.\n"); exit(1); 
}

if(($opt_H{"--no-search"}) && 
   (($opt_H{"-b"} ne '') ||
    ($opt_H{"-l"})      ||
    ($opt_H{"--toponly"})  ||
    ($opt_H{"--no-trunc"})  ||
    ($opt_H{"--forward"})  ||
    ($opt_H{"--global"}))) {
    printf STDERR ("\nERROR, --no-search is incompatible with search-specific options: -b,-l,--toponly,--no-trunc,--forward, and --global.\n"); exit(1); 
}

if(($opt_H{"--prep-n"} ne "") && ($opt_H{"--prep-p"} ne "")) { 
    printf STDERR ("\nERROR, --prep-n and --prep-p are incompatible, choose one or the other.\n"); exit(1);
}    
# Check for incompatible option ranges
if(($opt_H{"-l"} ne "")       && ($opt_H{"-l"} <= 0))       { printf STDERR ("\nERROR, with -l <n>, <n> must be greater than 0.\n"); exit(1); }
if(($opt_H{"--prep-n"} ne "") && ($opt_H{"--prep-n"} <= 0)) { printf STDERR ("\nERROR, with --prep-n <n>, <n> must be greater than 0.\n"); exit(1); }
if(($opt_H{"--prep-p"} ne "") && ($opt_H{"--prep-p"} <= 0)) { printf STDERR ("\nERROR, with --prep-p <n>, <n> must be greater than 0.\n"); exit(1); }
if(($opt_H{"--mxsize"} ne "") && ($opt_H{"--mxsize"} <= 0.)) { printf STDERR ("\nERROR, with --mxsize <f>, <f> must be greater than 0.\n"); exit(1); }
if(($opt_H{"--filter"} ne "") && (($opt_H{"--filter"} < 0.) || ($opt_H{"--filter"} > 1.))) { printf STDERR ("\nERROR, with --filter <f>, <f> must be between 0. and 1.\n"); exit(1); }


###################################################
# Process command-line arguments and print banner #
###################################################

if(scalar(@ARGV) != 2) {   
    print "Incorrect number of command line arguments.\n";
    print $usage;
    print "\nTo see more help on available options, do ssu-draw -h\n\n";
    exit(1);
}
my ($target_file, $out_root) = @ARGV;

my $out_dir      = $out_root;
my $out_dir_root = $out_dir . "/" . $out_root;
my ($sum_file, $sum_file2print);
if($opt_H{"--prep-n"} || $opt_H{"--prep-p"}) { 
    $sum_file       = $out_dir_root . ".ssu-align.prep.sum";
    $sum_file2print = $out_root . ".ssu-align.prep.sum";
}
else {
    $sum_file       = $out_dir_root . ".ssu-align.sum";
    $sum_file2print = $out_root . ".ssu-align.sum";
}
open(OUT, ">" . $sum_file) || die "ERROR, creating file $sum_file.";
close(OUT);

print_banner($0, \%opt_H, \%opt_takes_arg_H, \@opt_order_A, \%opt_is_prep_H, \@ARGV, \$prep_enabled_options, $sum_file);


##################################################################
# Validate that everything is go and determine output file names #
##################################################################
my ($ssualign, $cmsearch, $cmalign, $sfetch, $weight, $cm_file);
validate_and_setup($target_file, \%opt_H, \$ssualign, \$cmsearch, \$cmalign, \$sfetch, \$weight, \$cm_file);

# determine number of sequences in the target sequence file
my $nseq_target_file = determine_num_seqs($target_file);

# create the output directory we'll populate with our output files
create_output_dir($out_dir, \%opt_H); 

my (@indi_cm_name_A);
process_cm_file($out_root, $cm_file, \%opt_H, \@indi_cm_name_A);
my $ncm = scalar(@indi_cm_name_A); 
if(($opt_H{"--no-search"}) && ($ncm > 1)) { printf("ERROR, the --no-search option only works if the CM file contains exactly 1 CM, $cm_file has $ncm CMs in it.\n"); exit(1); }

my ($tab_file, $description_width, $search_time);
my $max_file_name_width = 0;
my $abs_orig_cm_file = abs_path($cm_file);

my ($cluster_prefix, $cluster_suffix);
if($opt_H{"--prep-n"} || $opt_H{"--prep-p"}) { 
    prepare_only($target_file, $out_dir, $out_root, \%opt_H, $ssualign, $weight, $cm_file, $prep_enabled_options, $nseq_target_file, \@indi_cm_name_A, \$max_file_name_width, $sum_file);
    print_string_to_file($sum_file, 1, (sprintf("  %-*s  ssu-align output file (*this* text printed to stdout)\n", $max_file_name_width, $sum_file2print)));
    print_string_to_file($sum_file, 1, sprintf("#\n# All output files created in directory \.\/%s\/\n", $out_dir));
    print_string_to_file($sum_file, 1, sprintf("#\n", $out_dir));

    exit(0);
}
# if we get here, neither --prep-p nor --prep-n were enabled


############################################################################
# Step 1: Define sequence ends (and classify seqs if > 1 CM) with cmsearch #
############################################################################
if(! $opt_H{"--no-search"}) { 
    $search_time = -1 * time();
    search_sequences_with_each_model(\%opt_H, $cmsearch, $cm_file, $target_file, $out_dir_root, $nseq_target_file, 
				     \@indi_cm_name_A, \$tab_file, \$max_file_name_width, \$description_width, $sum_file);
    $search_time += time();
}


################################
# Step 2: Extract subsequences #
################################
my %bestmatch_cm_H = ();
my %new_target_file_per_cm_name_H = ();
my %hmmscores2print_H = ();
my $max_seq_name_width;

if(! $opt_H{"--no-search"}) { 
    classify_and_extract_subseqs(\%opt_H, $tab_file, $target_file, $out_dir_root, $sfetch, $max_file_name_width, \@indi_cm_name_A, \%bestmatch_cm_H, \%new_target_file_per_cm_name_H, \%hmmscores2print_H, \$max_seq_name_width, $sum_file);
}
else { 
    # No initial search stage; align all the sequences in the full target sequence file to the only CM (we've checked there's only 1 CM)
    $new_target_file_per_cm_name_H{$indi_cm_name_A[0]} = $target_file;
}


###########################
# Step 3: Align sequences #
###########################
my ($align_time);
my %cmscores2print_H = ();
if(! $opt_H{"--no-align"}) {
    $align_time = -1 * time();
    align_subseqs(\%opt_H, $out_dir_root, $cmalign, $max_file_name_width, $description_width, $weight, \@indi_cm_name_A, \%new_target_file_per_cm_name_H, \%cmscores2print_H, $sum_file); 
    $align_time += time();
}

#############################
# Step 4: Print scores file #
#############################
my $scores_file       = $out_dir_root . ".scores";
my $scores_file2print = $out_root     . ".scores";
if(! $opt_H{"--no-search"}) { 
    print_scores_file($target_file, $ncm, $scores_file, $scores_file2print, $max_seq_name_width, \@indi_cm_name_A, \%bestmatch_cm_H, \%cmscores2print_H, \%hmmscores2print_H, $sum_file);
    print_string_to_file($sum_file, 1, sprintf("  %-*s  list of CM/HMM scores for each sequence\n", $max_file_name_width, $scores_file2print));
}


#################
# Print timings #
#################
$total_time += time();

print_string_to_file($sum_file, 1, sprintf("  %-*s  summary file (*this* text printed to stdout)\n", $max_file_name_width, $sum_file2print));
print_string_to_file($sum_file, 1, sprintf("#\n# All output files created in directory \.\/%s\/\n", $out_dir));
print_string_to_file($sum_file, 1, sprintf("#\n", $out_dir));

if(! $opt_H{"--no-align"})  { print_timing("# CPU time (search):    ", $search_time, $sum_file); }
if(! $opt_H{"--no-search"}) { print_timing("# CPU time (alignment): ", $align_time, $sum_file); }
print_timing("# CPU time (total):     ", $total_time, $sum_file); 
print_string_to_file($sum_file, 1, sprintf("#\n", $out_dir));

#remove esl-sfetch index file we created for the target file
my $ssi_file = $target_file . ".ssi";
if(-e $ssi_file) { 
    my $command = "rm -f $ssi_file 2>&1";
    my $tmp = `$command`;
    if(($? >> 8) != 0) { 
	printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
    }
}

# success, exit normally
exit(0); 


###############
# Subroutines #
###############

#####################################################################
# Subroutine: print_banner()
# Incept:     EPN, Tue Jun 16 07:26:13 2009
# 
# Purpose:    Print the ssu-align banner and determine prep options
#             that will be passed to subsequent ssu-align calls if
#             we're in prep mode.
#
# Arguments: 
#    $script_call:            call used to invoke this (ssu-align) script
#    $opt_HR:                 REFERENCE to hash of command-line options
#    $opt_takes_arg_HR:       REFERENCE to hash telling if each option takes an argument (1) or not (0)
#    $opt_order_AR:           REFERENCE to array specifying order of options
#    $opt_is_prep_HR:         REFERENCE to hash telling if each option gets passed on to child processes in prep mode
#    $argv_R:                 REFERENCE to @ARGV, command-line arguments
#    $prep_enabled_options_R: REFERENCE to prep options, filled here
#    $sum_file:               file to print to 
#
# Returns:    Nothing, if it returns, everything is valid.
# 
####################################################################
sub print_banner { 
    my $narg_expected = 8;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, print_banner() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($script_call, $opt_HR, $opt_takes_arg_HR, $opt_order_AR, $opt_is_prep_HR, $argv_R, $prep_enabled_options_R, $sum_file) = @_;

    my ($i, $script_name);
    $script_call =~ s/^\.+\///;
    $script_name = $script_call;
    $script_name =~ s/.+\///;

    my $enabled_options = "";
    my $prep_enabled_options = "";
    foreach $opt (@{$opt_order_AR}) { 
	if($opt_takes_arg_HR->{$opt}) { if($opt_HR->{$opt} ne "") { $enabled_options .= " " . $opt . " " . $opt_HR->{$opt}; } }
	else                  	      { if($opt_HR->{$opt})       { $enabled_options .= " " . $opt; } }
	if($opt_is_prep_HR->{$opt}) { 
	    if($opt_takes_arg_HR->{$opt}) { if($opt_HR->{$opt} ne "") { $prep_enabled_options .= " " . $opt . " " . $opt_HR->{$opt}; } }
	    else                  	  { if($opt_HR->{$opt})       { $prep_enabled_options .= " " . $opt; } }
	}
    }

    print_string_to_file($sum_file, 1, "\# $script_name :: define and align SSU rRNA sequences\n");
    print_string_to_file($sum_file, 1, "\# SSU-ALIGN 0.1 (October 2009)\n");
    print_string_to_file($sum_file, 1, "\# Copyright (C) 2009 HHMI Janelia Farm Research Campus\n");
    print_string_to_file($sum_file, 1, "\# Freely distributed under the GNU General Public License (GPLv3)\n");
    print_string_to_file($sum_file, 1, "\# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
    print_string_to_file($sum_file, 1, sprintf("%-10s %s ", "# command:", $script_call . $enabled_options));
    for($i = 0; $i < scalar(@{$argv_R}) - 1; $i++) { 
	print_string_to_file($sum_file, 1, sprintf("$argv_R->[$i] "));
    }
    print_string_to_file($sum_file, 1, sprintf("$argv_R->[$i]\n"));
    print_string_to_file($sum_file, 1, sprintf("%-10s ", "# date:"));
    print_string_to_file($sum_file, 1, sprintf(scalar localtime()));
    print_string_to_file($sum_file, 1, sprintf("\n"));

    #Return: prep_options we defined in this subroutine
    $$prep_enabled_options_R = $prep_enabled_options;
    return;
}


#####################################################################
# Subroutine: validate_and_setup()
# Incept:     EPN, Mon Nov  3 15:05:56 2008
# 
# Purpose:    Validation and setup:
#             - validate that the sequence file exists
#             - validate that the required executable programs exist
#             - validate that the CM file exists
#
# Arguments: 
# $target_file:    the target sequence file 
# $opt_HR:         reference to the hash of command-line options
# $ssualign_R:     RETURN; ssu-align executable command
# $cmsearch_R:     RETURN; cmsearch executable command
# $cmalign_R:      RETURN; cmalign executable command
# $sfetch_R:       RETURN; esl-sfetch executable command
# $weight_R:       RETURN; esl-weight executable command
# $cm_file_R:      RETURN; the path to the CM file, either default CM file or <s> from -m <s>
# 
# Returns:    Nothing, if it returns, everything is valid.
# 
# Exits:      If a required program does not exist, the program 
#             prints a message to STDERR explaining why it's
#             exiting early and then exits with non-zero status.
#
####################################################################
sub validate_and_setup { 
    my $narg_expected = 8;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, validate_and_setup() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my($target_file, $opt_HR, $ssualign_R, $cmsearch_R, $cmalign_R, $sfetch_R, $weight_R, $cm_file_R) = @_;

    #Make sure the SSUALIGNDIR environmental variable is set.
    my $ssualigndir = $ENV{'SSUALIGNDIR'};
    if(! exists($ENV{'SSUALIGNDIR'})) { 
	printf STDERR ("ERROR, the environment variable SSUALIGNDIR is not set, please set it to the directory where you installed SSU-ALIGN.\n"); 
	exit(1); 
    }

    #Make sure the CM file exists
    my $cm_file = "";
    if($opt_HR->{"-m"} ne "") { 
	$cm_file = $opt_HR->{"-m"}; 
	if(!(-e $cm_file))   { printf STDERR ("ERROR, CM file $cm_file, specified with -M does not exist.\n"); exit(1); }
    }
    else { 
	$cm_file = $ssualigndir . "/ssu-align-0p1.cm";
	if(!(-e $cm_file))   { printf STDERR ("ERROR, the default CM file $cm_file does not exist.\n"); exit(1); }
    }

    #Make sure the target file exists
    if(!(-e $target_file))   { printf STDERR ("ERROR, target sequence file $target_file does not exist.\n"); exit(1); }

    my $trash;
    my $cmsearch   = "ssu-cmsearch";
    my $cmalign    = "ssu-cmalign";
    my $sfetch     = "ssu-esl-sfetch";
    my $weight     = "ssu-esl-weight";
    my $ssualign   = "ssu-align";
    # check that the required programs are in the PATH
    if(!($opt_HR->{"--no-search"})) { 
	$trash = `$cmsearch -h 2>&1`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $cmsearch is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
	my $trash = `$sfetch -h 2>&1`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $sfetch is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
    }
    if(!($opt_HR->{"--no-align"})) { 
	$trash = `$cmalign -h 2>&1`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $cmalign is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
    }
    if($opt_HR->{"--filter"} ne "") { 
	my $trash = `$weight -h 2>&1`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $weight is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
    }
    if(($opt_HR->{"--prep-n"} ne "") || ($opt_HR->{"--prep-p"})) { 
	my $trash = `$ssualign -h 2>&1`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $ssualign is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
    }

    $$ssualign_R    = $ssualign;
    $$cmsearch_R    = $cmsearch;
    $$cmalign_R     = $cmalign;
    $$sfetch_R  = $sfetch;
    $$weight_R  = $weight;
    $$cm_file_R     = $cm_file;

    return;
}


#####################################################################
# Subroutine: determine_num_seqs()
# Incept:     EPN, Mon Nov  3 15:18:52 2008
# 
# Purpose:    Count the number of sequences in the fasta file 
#             <$target_file>.
#
# Arguments: 
# $target_file: the target sequence file 
#
# 
# Returns:    <$nseq_target_file>: number of sequences in 
#             <$target_file>.
# 
####################################################################
sub determine_num_seqs { 
    my $narg_expected = 1;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, determine_num_seqs() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($file) = $_[0];

    if(!(-e $file)) { printf STDERR ("ERROR, determine_num_seqs(), file $file does not exist.\n"); exit(1); }
    my $command = "grep \"\^\>\" $file | nl | tail -1 2>&1";
    my $output = `$command`;
    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$output\n", ($? >> 8)); exit($? >> 8); }
    chomp $output;
    $output =~ s/^\s+//;
    $output =~ s/\s+.*$//;
    return $output;
}

#####################################################################
# Subroutine: create_output_dir()
# Incept:     EPN, Mon Nov  3 15:22:26 2008
# 
# Purpose:    Create a new directory <$outdir> for the output files. 
#             If the directory already exists and <$do_clobber>, 
#             delete all of the files within it.
# 
# Arguments:  
# $out_dir:   directory to create
# $opt_HR:    reference to the hash of command-line options
#
# Returns:    Nothing.
#
# Exits:      If the directory already exists and <$do_clobber> is
#             FALSE. If a system call unexpectedly fails and returns 
#             a non-zero status code. 
# 
####################################################################
sub create_output_dir { 
    my $narg_expected = 2;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, create_output_dir() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my($out_dir, $opt_HR) = @_;

    my ($command, $tmp);
    # create output directory
    if(-d $out_dir) { 
	if(! $opt_HR->{"-F"}) { 
	    printf STDERR ("ERROR, output directory $out_dir already exists. Delete it or use -F to overwrite it.\n"); exit(1); 
	}
	else { # dir exists, but -F enabled, so we remove it
	    if($out_dir eq "") { printf STDERR ("ERROR, trying to create directory named \"\"\n"); exit(1); }
	    $command = "rm -rf $out_dir/* 2>&1";
	    $tmp = `$command`;
	    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); }
	    $command = "rm -f $out_dir/\.\#* 2>&1";
	    $tmp = `$command`;
	    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); }
	    $command = "rmdir $out_dir 2>&1";
	    $tmp = `$command`;
	    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); }
	    if(-d $out_dir) { printf STDERR ("ERROR, output directory $out_dir still exists after the command $command.\n"); exit(1); }
	}
    }
    # if we get here, either $out_dir does not yet exist, or it does but -F was set on command line
    $command = "mkdir $out_dir 2>&1";
    $tmp = `$command`;
    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); }

    return;
}


#####################################################################
# Subroutine: process_cm_file()
# Incept:     EPN, Tue Nov  4 08:20:47 2008
# 
# Purpose:    Validate and process the CM file. A CM file 
#             <$my_cm_file_copy> is valid if each of the <x> CM 
#             within it is has a unique name. 
#
# Arguments:  
# $out_root:             command-line argument, the root for output files
# $cm_file:              the CM file we'll use
# $opt_HR:               reference to the hash of command-line options
# $indi_cm_name_AR:      RETURN; array of individual CM names in the
#                        order they appear in the CM file
# 
# Returns:    Fills RETURN arguments as listed above.
#
# Exits:      If two CMs in <$cm_file> have the same name we exit,
#             or we can't open <$cm_file>. In both cases, program
#             exits with non-zero return status.
# 
####################################################################
sub process_cm_file { 
    my $narg_expected = 4;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, process_cm_file() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my($out_root, $cm_file, $opt_HR, $indi_cm_name_AR) = @_;
    
    my($line, $cm_name);
    my %cm_name_exists_H = ();

    if(open(CM, $cm_file) == 0) { printf STDERR ("ERROR, could not open $cm_file for reading.\n"); exit(1); }
    while($line = <CM>) {
	# the lines we're interested in look like this:
	#NAME     archaea
	if($line =~ /^NAME\s+(\S+)/) { 
	    $cm_name = $1;
	    push(@{$indi_cm_name_AR}, $cm_name);
	    if(exists($cm_name_exists_H{$cm_name})) { printf STDERR ("ERROR, two CMs in CM file $cm_file have the name $cm_name. Each CM must have a unique name.\n"); exit(1); }
	    $cm_name_exists_H{$cm_name} = 1;
	    if($cm_name eq $df_none_name) { printf STDERR ("ERROR, you can't use a CM with the name $df_none_name, that's reserved for indicating which sequences are not the best-match to any models.\n"); exit(1); }
	}
    }
    close(CM);
    return;
}									 


#####################################################################
# Subroutine: prepare_only()
# Incept:     EPN, Mon Nov  3 15:25:23 2008
# 
# Purpose:    Carry out a special mode of ssu-align for creating
#             scripts to split up large alignment jobs into many
#             smaller jobs. This subroutine is called only if --prep-n or 
#             --prep-p is enabled on the command line. 
# 
#             The target sequence file <$target_file> is partitioned
#             into > 1 new, smaller fasta files. A shell script 
#             named <$out_dir_root.sh> is created that calls 'ssu-align'
#             once each for each of the new fasta files. A separate perl 
#             script named <$out_dir_root.merge.pl> is created that is to be
#             run after the alignments in <$out_dir_root.sh> are complete.
#             This script merges all the small alignments into
#             one big alignment.
# 
# Arguments:  
# $target_file              the target sequence file
# $out_dir                  output directory
# $out_root                 root for output files
# $opt_HR:                  reference to the hash of command-line options
# $ssualign:                the ssu-align executable command
# $weight                   esl-weight command
# $cm_file:                 the CM file 
# $prep_options:            options to pass to children jobs
# $nseq_target_file:        number of sequences in $target_file
# $indi_cm_name_AR:         reference to array with names of individual CMs
# $max_file_name_width_R:   RETURN; maximum length of a file name
# $sum_file:                file to print output file notices to
#
# Returns:    Nothing.
#
# Exits:      Upon successful completion with a zero status code 
#             (normal). Exits early upon failure with informative
#             message and non-zero status code. 
# 
####################################################################
sub prepare_only { 
    my $narg_expected = 12;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, prepare_only() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my($target_file, $out_dir, $out_root, $opt_HR, $ssualign, $weight, $cm_file, $prep_options, $nseq_target_file, $indi_cm_name_AR, $max_file_name_width_R, $sum_file) = @_;

    # Steps we'll perform
    # 1. partition the target seq file
    # 2. print ssu-align.pl calls for each target seq file to screen
    # 3. print cmalign --merge calls to eventually merge resulting 
    #    alignments from ssu-align.pl calls in 2 together.
    # 4. exit

    my ($shell_script, $shell_script2print, $merge_script, $merge_script2print, $remainder, $n, $target_subfile_root, $target_subfile, $sub_output);
    my ($nseq_this_file, $line, $ncm, $ndig, $tmp, $description_width, $dashes1, $dashes2);
    my ($i, $nmerge, $iter, $nstop, $lower, $upper, $merged_root, $merged_name, $fil_merged_name, $merged_lower_name, $merged_upper_name, $cm_name);

    $ncm = scalar(@{$indi_cm_name_AR});

    $shell_script       = $out_dir_root . ".sh";
    $shell_script2print = $out_root . ".sh";
    $merge_script       = $out_dir_root . ".merge.pl";
    $merge_script2print = $out_root . ".merge.pl";
    if(open(SH, ">" . $shell_script) == 0) { printf STDERR ("ERROR, could not open $shell_script for writing.\n"); exit(1); }

    #determine number of seqs per file (if --prep-p)
    my ($prep_nseq, $prep_nproc);
    if($opt_HR->{"--prep-p"} ne "") { 
	$prep_nproc = $opt_HR->{"--prep-p"};
	$prep_nseq  = int($nseq_target_file / ($prep_nproc)); 
	$remainder  = $nseq_target_file - ($prep_nseq * $prep_nproc);
	if($remainder > 0) { $prep_nseq++; }
    }
    elsif($opt_HR->{"--prep-n"} ne "") { 
	$prep_nproc = int($nseq_target_file / ($prep_nseq));
	$remainder  = $nseq_target_file - ($prep_nseq * $prep_nproc);
	if($remainder > 0) { $prep_nproc++; }
    }
    else { printf STDERR ("ERROR, in prepare_only but neither --prep-p nor --prep-n enabled on the command-line. This shoudln't happen.\n"); exit(1); }

    if(($opt_HR->{"--prep-p"} ne "") && ($prep_nproc > $nseq_target_file)) { 
	printf STDERR ("ERROR, --prep-p %d enabled, but there's only %d sequences in the target file.\n", $prep_nproc, $nseq_target_file); exit(1); 
    }
    if(($opt_HR->{"--prep-n"} ne "") && ($prep_nproc == 1)) {
	printf STDERR ("ERROR, --prep-n %d enabled, but there's only %d sequences in the target file.\nNo need to use --prep-n, you're requesting the target file be split into only 1 partition.\n", $prep_nseq, $nseq_target_file); exit(1); 
    }

    $ndig = 1; $tmp = $prep_nproc; while($tmp > 10) { $ndig++; $tmp /= 10.; }
    my $max_file_name_width = length($merge_script2print);
    $target_subfile_root = $target_file . "." . $n;
    $target_subfile_root =~ s/^.+\///;  # remove path 
    if($max_file_name_width < (length($target_subfile_root) + $ndig)) { 
	$max_file_name_width = length($target_subfile_root) + $ndig;
    }
    if($max_file_name_width < (length($out_root . ".ssu-align.prep.out"))) { 
	$max_file_name_width = length($out_root . ".ssu-align.prep.out");
    }
    if($max_file_name_width < (length("output file name"))) { 
	$max_file_name_width = length("output file name"); 
    }
    my $max_cm_name_width = max_length_scalar_in_array($indi_cm_name_AR);
    
    $description_width = length("perl script to merge alignments when  completes");
    $description_width += length($shell_script2print);
    $dashes1 = ""; for($i = 0; $i < $max_file_name_width; $i++) { $dashes1 .= "-"; } 
    $dashes2 = ""; for($i = 0; $i < $description_width; $i++)   { $dashes2 .= "-"; } 
    
    print_string_to_file($sum_file, 1, sprintf("#\n# Prep mode: Splitting up ssu-align job into %d smaller jobs.\n", $prep_nproc));
    print_string_to_file($sum_file, 1, sprintf("#\n"));
    print_string_to_file($sum_file, 1, sprintf("# %-*s  %-*s\n", $max_file_name_width, "output file name", $description_width, "description"));
    print_string_to_file($sum_file, 1, sprintf("# %-*s  %-*s\n", $max_file_name_width, $dashes1, $description_width, $dashes2));

    # 1. partition the target seq file AND
    # 2. print ssu-align calls for each target seq file to stdout
    $n = 1;
    $target_subfile_root = $target_file . "." . $n;
    $target_subfile_root =~ s/^.+\///;  # remove path 
    $target_subfile      = $out_dir . "/" . $target_subfile_root;
    if(open(SUB, ">" . $target_subfile) == 0) { printf STDERR ("ERROR, could not open $target_subfile for writing.\n"); exit(1); }
    $nseq_this_file = -1;
    if(open(FULL, $target_file) == 0) { printf STDERR ("ERROR, could not open $target_file for reading.\n"); exit(1); }
    while($line = <FULL>) { 
	if($line =~ m/^>/) { 
	    if(++$nseq_this_file == $prep_nseq) { 
		close(SUB); 
		print_string_to_file($sum_file, 1, sprintf("  %-*s  partition %*d fasta sequence file\n", $max_file_name_width, $target_subfile_root, $ndig, $n));
		printf SH ("%s%s%s\n", $cluster_prefix, "$ssualign -F $prep_enabled_options $target_subfile_root $out_root." . $n, $cluster_suffix);
		$target_subfile_root = $target_file . "." . (++$n);
		$target_subfile_root =~ s/^.+\///;  # remove path 
		$target_subfile      = $out_dir . "/" . $target_subfile_root;
		if(open(SUB, ">" . $target_subfile) == 0) { printf STDERR ("ERROR, could not open $target_subfile for writing.\n"); exit(1); }
		$nseq_this_file = 0;
	    }
	}
	print SUB ($line);
    }
    close(FULL);
    close(SUB);
    print_string_to_file($sum_file, 1, sprintf("  %-*s  partition %*d fasta sequence file\n", $max_file_name_width, $target_subfile_root, $ndig, $n));
    printf SH ("%s%s%s\n", $cluster_prefix, "$ssualign $prep_enabled_options $target_subfile_root $out_root." . $n, $cluster_suffix);
    close(SH); 
    if($n != $prep_nproc) { printf STDERR ("ERROR, problem partitioning target fasta file $target_file into $prep_nproc files, only $n files were successfully created.\n"); exit(1); }

    my @to_mergeA;
    my @new_to_mergeA;

    # 3. print cmalign --merge calls to eventually merge resulting 
    #    alignments from ssu-align.pl calls in 2 together.
    if(! $opt_HR->{"--no-align"}) { 
	if(open(MG, ">" . $merge_script) == 0) { printf STDERR ("ERROR, could not open $merge_script for writing.\n"); exit(1); }
	
	my $m;
	for($m = 1; $m <= $ncm; $m++) { 
	    $cm_name = $indi_cm_name_AR->[($m-1)];
	    printf MG ("\# Merging alignments to CM %d of %d\n", $m, $ncm);
	    @to_mergeA = ();
	    for($i = 1; $i <= $prep_nproc; $i++) { push(@to_mergeA, $i); }
	    $nmerge = scalar(@to_mergeA);
	    $iter = 0;
	    while($nmerge > 1) { 
		$iter++;
		@new_to_mergeA = ();
		if (($nmerge % 2) == 0) { $nstop = $nmerge; } else { $nstop = $nmerge+1; }
		for($i = 0; $i < $nstop; $i+=2) { 
		    $lower = $to_mergeA[$i];
		    if($i == (scalar(@to_mergeA)-1)) { 
			# special case, we have a single alignment remaining, not a pair of alignments, 
			# if nec, copy it to a new name if it exists (so the merging process can march along), else we do nothing
			$upper = $lower;
			$lower =~ s/\-.+//;
			$upper =~ s/.+\-//;
			$merged_root = $lower . "-" . $upper;
			$merged_name = $out_root . "." . $merged_root. "." . $cm_name . ".merged.stk";
			if($iter > 1) { $merged_lower_name = $out_root . "." . $to_mergeA[$i] . "." . $cm_name . ".merged.stk"; }
			else          {	$merged_lower_name = $out_root . "." . $to_mergeA[$i] . "/" . $out_root . "." . $to_mergeA[$i] . "." . $cm_name . ".stk"; }
			if($merged_name ne $merged_lower_name) { 
			    printf MG ("if(-e \"$merged_lower_name\") { \n"); 
			    printf MG ("\tsystem(\"cp $merged_lower_name $merged_name\");\n");
			    printf MG ("\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"cp $merged_lower_name $merged_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			    printf MG ("}\n");
			    #erase intermediate alignment if it exists
			    if($iter > 1) { 
				printf MG ("if(-e \"$merged_lower_name\") { \n"); 
				printf MG ("\tsystem(\"rm -f $merged_lower_name\");\n");
				printf MG ("\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"rm -f $merged_lower_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
				printf MG ("}\n");
			    }
			}
		    }
		    else { #normal case, we have a pair of alignments to merge together
			$upper = $to_mergeA[($i+1)]; 
			$lower =~ s/\-.+//;
			$upper =~ s/.+\-//;
			$merged_root = $lower . "-" . $upper;
			if($opt_HR->{"--enabled"} ne "") { 
			    $merged_name     = $out_root . "." . $merged_root . "." . $cm_name . ".merged.nf.stk";
			    $fil_merged_name = $out_root . "." . $merged_root . "." . $cm_name . ".merged.stk";
			}
			else { 
			    $merged_name = $out_root . "." . $merged_root . "." . $cm_name . ".merged.stk";
			}
			if($iter > 1) { 
			    $merged_lower_name = $out_root . "." . $to_mergeA[$i] .     "." . $cm_name . ".merged.stk";
			    $merged_upper_name = $out_root . "." . $to_mergeA[($i+1)] . "." . $cm_name . ".merged.stk";
			}
			else { #iter == 1
			    $merged_lower_name = $out_root . "." . $to_mergeA[$i]     . "/" . $out_root . "." . $to_mergeA[$i] .     "." . $cm_name . ".stk";
			    $merged_upper_name = $out_root . "." . $to_mergeA[($i+1)] . "/" . $out_root . "." . $to_mergeA[($i+1)] . "." . $cm_name . ".stk";
			}
			push(@new_to_mergeA, $merged_root);
			printf MG ("if(-e \"$merged_lower_name\") { \n"); 
			printf MG ("\tif(-e \"$merged_upper_name\") { \n"); 
			#DEBUGGING printf STDERR ("cm: $m iter: $iter i: $i $merged_lower_name $merged_upper_name\n");
			printf MG ("\t\tsystem(\"$cmalign -o $merged_name --merge --cm-idx $m $cm_file $merged_lower_name $merged_upper_name\");\n");
			printf MG ("\t\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"$cmalign -o $merged_name --merge --cm-idx $m $merged_lower_name $merged_upper_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			if($opt_HR->{"--filter"}) { 
			    printf MG ("\t\tsystem(\"$weight -f --idf " . $opt_HR->{"--filter"} . " $merged_name > $fil_merged_name\");\n");
			    printf MG ("\t\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"$weight -f --idf " . $opt_HR->{"--filter"} . " $merged_name > $fil_merged_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			    #erase non-filtered alignment
			    printf MG ("if(-e \"$merged_name\") { \n"); 
			    printf MG ("\tsystem(\"rm -f $merged_name\");\n");
			    printf MG ("\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"rm -f $merged_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			    printf MG ("} \n");
			}
			printf MG ("\t\t}\n");
			# else $merged_lower_name exists, but $merged_upper_name does not exist
			printf MG ("\telse { \n");
			printf MG ("\t\tsystem(\"cp $merged_lower_name $merged_name\");\n");
			printf MG ("\t\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"cp $merged_lower_name $merged_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			printf MG ("\t}\n");
			printf MG ("}\n");
			printf MG ("elsif((-e \"$merged_upper_name\")) { \n"); 
			# else $merged_upper_name exists, but $merged_lower_name does not exist
			printf MG ("\tsystem(\"cp $merged_upper_name $merged_name\");\n");
			printf MG ("\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"cp $merged_upper_name $merged_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			printf MG ("}\n");
			printf MG ("\n");
			# else: neither $merged_upper_name exists, nor $merged_lower_name exists, do nothing next iteration will handle this
			
			# erase the intermediate alignments if they exist 
			if($iter > 1) { 
			    printf MG ("if(-e \"$merged_lower_name\") { \n"); 
			    printf MG ("\tsystem(\"rm -f $merged_lower_name\");\n");
			    printf MG ("\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"rm -f $merged_lower_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			    printf MG ("} \n");
			    printf MG ("if(-e \"$merged_upper_name\") { \n"); 
			    printf MG ("\tsystem(\"rm -f $merged_upper_name\");\n");
			    printf MG ("\tif((\$? \<\< 8) != 0) { printf STDERR (\"ERROR, system(\\\"rm -f $merged_upper_name\\\" returned a non-zero exit status \%d\\n\", (\$? >> 8)); exit((\$? >> 8)); }\n");
			    printf MG ("} \n");
			    printf MG ("\n");
			}
		    }
		}
		if (($nmerge % 2) != 0) { 
		    if($iter == 1) { push(@new_to_mergeA, $to_mergeA[($nmerge-1)] . "-" . $to_mergeA[($nmerge-1)]); } #special case, push 9-9 (for example), only nec if first iter, otherwise we're okay
		    else           { push(@new_to_mergeA, $to_mergeA[($nmerge-1)]); }  #push 5-6 in iter 2 (for example)
		}
		@to_mergeA = @new_to_mergeA;
		$nmerge = scalar(@to_mergeA);
	    }
	}
	close(MG);
    }
    
    print_string_to_file($sum_file, 1, sprintf("  %-*s  shell script that will run ssu-align %d times\n", $max_file_name_width, $shell_script2print, $prep_nproc));
    if(! $opt_HR->{"--no-search"}) { 
	print_string_to_file($sum_file, 1, sprintf("  %-*s  perl script to merge alignments when %s completes\n", $max_file_name_width, $merge_script2print, $shell_script2print));
    }
    $shell_script =~ s/$out_dir\///;
    $merge_script =~ s/$out_dir\///;
    #print_string_to_file($sum_file, 1, sprintf("To execute (doesn't work if you're going to use a cluster):\ncd $out_dir; sh $shell_script; perl $merge_script;\n"));

    $$max_file_name_width_R = $max_file_name_width;
    return;
}


#####################################################################
# Subroutine: search_sequences_with_each_model()
# Incept:     EPN, Mon Nov  3 15:42:17 2008
# 
# Purpose:    Run cmsearch on the target sequence file <$target_file>
#             in HMM mode to define start/stops of each sequence,
#             and to verify they're likely SSU at all.
#             
# Arguments:  
# $opt_HR:                 reference to the hash of command-line options
# $cmsearch:               the cmsearch executable
# $cm_file:                CM file
# $target_file:            the target sequence file
# $out_dir_root:           output file root, for naming output files
# $nseq_target_file:       number of sequences in target file
# $indi_cm_name_AR:        ref to array with individual CM names
# $tab_file_R:             RETURN; name of tab file to return
# $max_file_name_width_R:  RETURN; num chars in max length file name
# $description_width_R:    RETURN; num chars in description
# $sum_file:                file to print output file notices to
#
# Returns:    Nothing.
#
# Exits:      If the cmsearch call doesn't finish with a zero status
#             code we exit. cmsearch should print an error message 
#             to standard error if this occurs.
# 
####################################################################
sub search_sequences_with_each_model() { 
    my $narg_expected = 11;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, search_sequences_with_each_model() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my($opt_HR, $cmsearch, $cm_file, $target_file, $out_dir_root, $nseq_target_file, $indi_cm_name_AR, $tab_file_R, $max_file_name_width_R, $description_width_R, $sum_file) = @_;

    my ($i, $cmsearch_opts, $tab_file, $tab_file2print, $alg_flag, $max_file_name_width, $dashes1, $dashes2, $tmp, $command);

    $tab_file = $out_dir_root . ".tab";
    $tab_file2print = $out_root . ".tab";
    if   ($opt_HR->{"--forward"}) { $alg_flag = "--forward"; } 
    else                          { $alg_flag = "--viterbi"; } 
    if   ($opt_HR->{"--global"})  { $alg_flag .= " -g"; }

    # print info on what we just created
    $max_file_name_width  = max_length_scalar_in_array($indi_cm_name_AR); 
    $description_width    = $max_file_name_width;
    $description_width   += length("list of sequences to align with  CM");
    if($description_width < length("boundaries/scores of hits defined by HMM(s)")) { $description_width = length("boundaries/scores of hits defined by HMM(s)"); }

    $max_file_name_width += length($out_root . "." . ".hits.list");
    if($max_file_name_width < length("output file name")) { $max_file_name_width = length("output file name"); }
    $dashes1 = ""; for($i = 0; $i < $max_file_name_width; $i++) { $dashes1 .= "-"; } 
    $dashes2 = ""; for($i = 0; $i < $description_width; $i++)   { $dashes2 .= "-"; } 

    print_string_to_file($sum_file, 1, sprintf("#\n# Stage 1: Determining SSU start/end positions and best-matching models.\n"));
    print_string_to_file($sum_file, 1, sprintf("#\n"));
    print_string_to_file($sum_file, 1, sprintf("# %-*s  %-*s\n", $max_file_name_width, "output file name", $description_width, "description"));
    print_string_to_file($sum_file, 1, sprintf("# %-*s  %-*s\n", $max_file_name_width, $dashes1, $description_width, $dashes2));

    $cmsearch_opts = " --hmm-cW 1.5 --no-null3 --noalign ";
    my $cmsearch_T = $df_cmsearch_T;
    if($opt_HR->{"--toponly"}) { $cmsearch_opts .= " --toponly"; }

    $command = "$cmsearch $cmsearch_opts -T $cmsearch_T --tab $tab_file $alg_flag $cm_file $target_file 2>&1";
    $tmp = `$command`;
    if(($? >> 8) != 0) { 
	printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
    }
    print_string_to_file($sum_file, 1, sprintf("  %-*s  locations/scores of hits defined by HMM(s)\n", $max_file_name_width, $tab_file2print));

    $$tab_file_R            = $tab_file;
    $$max_file_name_width_R = $max_file_name_width;
    $$description_width_R   = $description_width;
    return;
}


#####################################################################
# Subroutine: classify_and_extract_subseqs()
# Incept:     EPN, Mon Nov  3 17:14:33 2008
# 
# Purpose:    Extract subsequences given the cmsearch tab file 
#             output. Also determine the CM c that has the highest
#             scoring hit to each sequence s and classify s as 
#             belonging to c. Then when we do alignment, for each 
#             CM we align all of that CM's seqs to it. Each sequence
#             is classified as belonging to only 1 CM. If only
#             1 CM exists in the CM file, then all sequences
#             will automatically be classified to it.
#             
# Arguments: 
# $opt_HR:                         reference to the hash of command-line options
# $tab_file:                       name of the tab output file.
# $target_file:                    name of the target sequence filee
# $out_dir_root:                   output root, for naming output files
# $sfetch:                         esl-sfetch executable
# $max_file_name_width:            max length of a file name
# $indi_cm_name_AR:                reference to array of individual CM names
# $bestmatch_cm_HR:                RETURN; reference to hash of best-matching CM for each sequence
# $new_target_file_per_cm_name_HR: RETURN; reference to hash of newly created target sequence file (key is CM name)
# $hmmscores2print_HR:             RETURN; reference to hash of hmm scores to print
# $max_seq_name_width_R:           RETURN; max length of a sequence name
# $sum_file:                       file to print output file notices to
#
# Returns:    Nothing, except values stored in RETURN arguments (see above)
#
# Exits:      If a `command` call doesn't finish with a non-zero status code, we exit. 
# 
####################################################################
sub classify_and_extract_subseqs { 
    my $narg_expected = 12;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, classify_and_extract_subseqs() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($opt_HR, $tab_file, $target_file, $out_dir_root, $sfetch, $max_file_name_width, $indi_cm_name_AR, $bestmatch_cm_HR, $new_target_file_per_cm_name_HR,
	$hmmscores2print_HR, $max_seq_name_width_R, $sum_file) = @_;
    my $cur_max_seq_name_width = 0;
    my $max_seq_name_width = 0;

    my %seq_exists_in_order_array_H = ();
    my @cm_name_from_tab_file_A = ();
    my($cm_name, $line);
    my($model_name, $seq_name, $tstart, $tend, $qstart, $qend, $bit, $E, $gc, $tlen, $m, $i, $max_cm_name_width);
    my %bit_cm_seq_HH = ();
    my %bit_seq_cm_HH = ();
    my %start_cm_seq_HH = ();
    my %end_cm_seq_HH = ();
    my @tmp_A = ();

    $max_cm_name_width = max_length_scalar_in_array($indi_cm_name_AR); 
    if($max_cm_name_width < length("model name")) { $max_cm_name_width = length("model name"); } 

    # Parse tab file, keep track of best scoring hit above our min length and min bit score for each CM for each seq
    if(open(TAB, $tab_file) == 0) { printf STDERR ("ERROR, could not open $tab_file for reading.\n"); exit(1); }
    $cm_name = "";

    # Set $min_len and $min_bit based on command-line options and defaults
    my ($min_len, $min_bit);
    if($opt_HR->{"-l"} ne "") { $min_len = $opt_HR->{"-l"}; }
    else                      { $min_len = $df_min_len;     }
    if($opt_HR->{"-b"} ne "") { $min_bit = $opt_HR->{"-b"}; }
    else                      { $min_bit = $df_min_len;     }
    my $do_truncate;
    if($opt_HR->{"--no-trunc"}) { $do_truncate = 0; }
    else                        { $do_truncate = 1; }
    
    my @seq_order_A = ();
    while($line = <TAB>) { 
	chomp $line;
	if($line =~ m/^\#\s+CM\:\s+(.+)$/) { 
	    $cm_name = $1;
	    push(@cm_name_from_tab_file_A, $cm_name);
	}
	elsif($line !~ m/^\#/) { 
	    $line =~ s/^\s+//;
	    @tmp_A = split(/\s+/, $line);
	    if(scalar(@tmp_A) != 9) { 
		printf STDERR ("ERROR, unable to read following line of $tab_file, it should have 9 tokens.\n"); printf("$line\n"); exit(1); 
	    }
	    ($model_name, $seq_name, $tstart, $tend, $qstart, $qend, $bit, $E, $gc) = @tmp_A;
	    if($tend > $tstart) { $tlen = $tend - $tstart + 1; }
	    else                { $tlen = $tstart - $tend + 1; }
	    if((!(exists($bit_cm_seq_HH{$cm_name}{$seq_name}))) || ($bit > $bit_cm_seq_HH{$cm_name}{$seq_name})) { 
		if(($tlen >= $min_len) && ($bit >= $min_bit)) { 
		    $bit_cm_seq_HH{$cm_name}{$seq_name}   = $bit;
		    $bit_seq_cm_HH{$seq_name}{$cm_name}   = $bit;
		    $start_cm_seq_HH{$cm_name}{$seq_name} = $tstart;
		    $end_cm_seq_HH{$cm_name}{$seq_name}   = $tend;
		    if(!(exists($seq_exists_in_order_array_H{$seq_name}))) { push(@seq_order_A, $seq_name); $seq_exists_in_order_array_H{$seq_name} = 1; }
		}
	    }
	}
    }
    # Make sure our tab file contains the same CMs in the same order as our CM file did.
    if(scalar(@cm_name_from_tab_file_A) != scalar(@{$indi_cm_name_AR})) { 
	printf STDERR ("ERROR, %d CMs read in tab file != %d CMs read from CM file.\n", scalar(@cm_name_from_tab_file_A), scalar(@{$indi_cm_name_AR}));
	exit(1);
    }
    for($m = 0; $m < scalar(@cm_name_from_tab_file_A); $m++) { 
	if($cm_name_from_tab_file_A[$m] ne $indi_cm_name_AR->[$m]) { 
	    printf STDERR ("ERROR, CM number %d (%s) from the tab file output is not the same as CM %d from the CM file (%s).\n", $cm_name_from_tab_file_A[$m], $indi_cm_name_AR->[$m]);
	    exit(1);
	}
    }

    # classify each seq: determine highest scoring model for each seq
    # also keep track of second best scoring model for each seq, so 
    # we can print that to the .scores file
    my @tmp_bit_A = ();
    my @tmp_cm_A = ();
    my %by_cm_name_HA = ();
    my %by_cm_bit_HA = ();
    my %by_cm_start_HA = ();
    my %by_cm_end_HA = ();
    my ($cmsc, $cmstructsc, $dashes, $output, $command);
    my ($winner_idx, $winner_cm, $winner_bit);
    my ($second_idx, $second_cm, $second_bit);
    foreach $seq_name (@seq_order_A) { 
	@tmp_bit_A = ();
	@tmp_cm_A  = ();
	foreach $cm_name (sort keys (%{$bit_seq_cm_HH{$seq_name}})) { 
	    push(@tmp_bit_A,$bit_seq_cm_HH{$seq_name}{$cm_name});
	    push(@tmp_cm_A, $cm_name);
	}
	$winner_idx = argmax_array(\@tmp_bit_A);
	$winner_cm  = $tmp_cm_A[$winner_idx];
	$winner_bit = $tmp_bit_A[$winner_idx];

	delete($tmp_bit_A[$winner_idx]);
	$second_idx = argmax_array(\@tmp_bit_A);
	$second_cm  = $tmp_cm_A[$second_idx];
	$second_bit = $tmp_bit_A[$second_idx];

	push(@{$by_cm_name_HA{$winner_cm}},  $seq_name);
	push(@{$by_cm_bit_HA{$winner_cm}},   $winner_bit);
	push(@{$by_cm_start_HA{$winner_cm}}, $start_cm_seq_HH{$winner_cm}{$seq_name});
	push(@{$by_cm_end_HA{$winner_cm}},   $end_cm_seq_HH{$winner_cm}{$seq_name});

	$cmsc = -1.0;
	$cmstructsc = -1.0;
	$hmmscores2print_HR->{$seq_name} = sprintf("%d %d %.2f %s %.2f %.2f",
						  $start_cm_seq_HH{$winner_cm}{$seq_name}, $end_cm_seq_HH{$winner_cm}{$seq_name}, 
						   $winner_bit, $second_cm, $second_bit);
	$bestmatch_cm_HR->{$seq_name} = $winner_cm;
    }

    # For each CM c, list the target sequences that score highest to c in tabular format
    # and then fetch them with esl-sfetch
    my ($index_file, $ncm_with_at_least_one_seq, $list_file, $list_file2print, $sfetch_in_file, $nwinners, $max_seq_name_width, $hits_file, $hits_file2print, $sfetch_options, $line);
    $ncm_with_at_least_one_seq = 0;
    $index_file = $target_file . ".ssi";
    
    #if index file exists, remove it and remake it (wasteful, but this is the only way to know for sure that the index was created for this specific file)
    if(-e $index_file)    { system("rm -f $index_file"); } 
    if(($? >> 8) != 0)    { printf STDERR ("ERROR, system(\"rm -f $index_file\" unexpectedly returned non-zero exit status %d.\n", ($? >> 8)); exit($? >> 8); }
    system("$sfetch \-\-index $target_file > /dev/null"); 
    if(($? >> 8) != 0)    { printf STDERR ("ERROR, system(\"$sfetch \-\-index $target_file > /dev/null\" unexpectedly returned non-zero exit status %d.\n", ($? >> 8)); exit($? >> 8); }

    for($m = 0; $m < scalar(@{$indi_cm_name_AR}); $m++) { 
	$cm_name = $indi_cm_name_AR->[$m];
	$list_file = $out_dir_root . "." . $cm_name . ".hits.list"; 
	$list_file2print = $out_root . "." . $cm_name . ".hits.list"; 
	$sfetch_in_file = $out_dir_root . "." . $cm_name . ".hits.in";
	if(!(exists($by_cm_name_HA{$cm_name}))) { $nwinners = 0; }
	else                                    { $nwinners = scalar(@{$by_cm_name_HA{$cm_name}}); }

	if($nwinners > 0) { 
	    $ncm_with_at_least_one_seq++;
	    if(open(OUTLIST,  ">" . $list_file) == 0)      { printf STDERR ("ERROR, could not open $list_file for writing.\n"); exit(1); }
	    if(open(SFETCHIN, ">" . $sfetch_in_file) == 0) { printf STDERR ("ERROR, could not open $sfetch_in_file for writing.\n"); exit(1); }

	    # determine max seq name width 
	    $cur_max_seq_name_width = length("target name");
	    for($i = 0; $i < $nwinners; $i++) { if(length($by_cm_name_HA{$cm_name}[$i]) > $cur_max_seq_name_width) { $cur_max_seq_name_width = length($by_cm_name_HA{$cm_name}[$i]); } }
	    $dashes = "";
	    for($i = 0; $i < $cur_max_seq_name_width; $i++) { $dashes .= "-"; }
	    printf OUTLIST  ("# List of %d subsequences to align to CM: $cm_name\n", $nwinners);
	    printf OUTLIST  ("# Created by ssu-align.pl.\n#\n");
	    printf OUTLIST  ("# %-*s  %6s  %6s  %8s\n", $cur_max_seq_name_width, "target name", "start", "stop", "score");
	    printf OUTLIST  ("# %*s  %6s  %6s  %8s\n", $cur_max_seq_name_width, $dashes, "------", "------", "--------");

	    for($i = 0; $i < $nwinners; $i++) { 
		#print_string_to_file($sum_file, 1, sprintf("%4d  $cm_name  %25s  %7.2f  %8d  %8d\n", ($i+1), $by_cm_name_HA{$cm_name}[$i], $by_cm_bitHA{$cm_name}[$i], $by_cm_startHA{$cm_name}[$i], $by_cm_endHA{$cm_name}[$i]));
		printf OUTLIST ("  %-*s  %6d  %6d  %8.2f\n", $cur_max_seq_name_width, $by_cm_name_HA{$cm_name}[$i], $by_cm_start_HA{$cm_name}[$i], $by_cm_end_HA{$cm_name}[$i], $by_cm_bit_HA{$cm_name}[$i]);
		if($do_truncate) { printf SFETCHIN ("$by_cm_name_HA{$cm_name}[$i]\t$by_cm_start_HA{$cm_name}[$i]\t$by_cm_end_HA{$cm_name}[$i]\t$by_cm_name_HA{$cm_name}[$i]\n"); }
		else             { printf SFETCHIN ("$by_cm_name_HA{$cm_name}[$i]\n"); }
	    }
	    #print_string_to_file($sum_file, 1, sprintf("\n"));
	    close(OUTLIST);
	    close(SFETCHIN);
	    #print_string_to_file($sum_file, 1, sprintf("Subsequences of %d seqs (<name> <start> <end> <bit score>) for CM $cm_name printed to file $listfile.\n", scalar(@{$by_cm_name_HA{$cm_name}})));
	    print_string_to_file($sum_file, 1, sprintf("  %-*s  list of sequences to align with $cm_name CM\n", $max_file_name_width, $list_file2print));

	    $hits_file = $out_dir_root . "." . $cm_name . ".hits.fa";
	    $hits_file2print = $out_root . "." . $cm_name . ".hits.fa";
	    if(-e ($hits_file)) { system("rm -f $hits_file"); }
	    if($do_truncate) { $sfetch_options = "-Cf"; }
	    else             { $sfetch_options = "-f";  }
	    if($do_truncate) { system("$sfetch -o $hits_file $sfetch_options $target_file $sfetch_in_file > /dev/null"); }
	    else             { system("$sfetch -o $hits_file $sfetch_options $target_file $sfetch_in_file > /dev/null"); }
	    if(($? >> 8) != 0) { printf STDERR ("ERROR, system(\"$sfetch $sfetch_options $target_file $sfetch_in_file\" unexpectedly returned non-zero exit status %d.\n", ($? >> 8)); exit($? >> 8); }

	    #print_string_to_file($sum_file, 1, sprintf("esl-sfetch -Cf $target_file $listfile > $hits_file\n"));
	    $command = "head -1 $hits_file 2>&1";
	    $output = `$command`;
	    if($output =~ m/\W/) 
	    { 
		if($nwinners > 1) { print_string_to_file($sum_file, 1, sprintf("  %-*s  %7d sequences to align with $cm_name CM\n", $max_file_name_width, $hits_file2print, scalar(@{$by_cm_name_HA{$cm_name}}))); }
		else              { print_string_to_file($sum_file, 1, sprintf("  %-*s  %7d sequence  to align with $cm_name CM\n", $max_file_name_width, $hits_file2print, scalar(@{$by_cm_name_HA{$cm_name}}))); }
	    }
	    else 
	    { 
		printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$output\n", ($? >> 8)); exit($? >> 8); 
		exit(1); 
	    }
	    system("rm -f $sfetch_in_file");
	    $new_target_file_per_cm_name_HR->{$cm_name} = $hits_file;
	    if($cur_max_seq_name_width > $max_seq_name_width) { $max_seq_name_width = $cur_max_seq_name_width; };
	}
    }
    if($ncm_with_at_least_one_seq == 0) { 
	printf STDERR ("\nERROR, 0 seqs had cmsearch hits with bit score > $min_bit and length > $min_len to any of the %d CMs in the tab file $tab_file.\nYou can change the minimum bit score to <x> with -b <x>, and minimum length to <n> with -l <n>.\n", scalar(@{$indi_cm_name_AR}));
	exit(1);
    }

    $$max_seq_name_width_R = $max_seq_name_width;
    return;
}


#####################################################################
# Subroutine: align_subseqs()
# Incept:     EPN, Mon Nov  3 17:20:42 2008
# 
# Purpose:    For each CM c, align all of c's classified sequences to
#             c using cmalign. If 0 seqs are classified as belonging
#             to c, skip the alignment step for c.
#
# Arguments:
# $opt_HR:                         reference to the hash of command-line options
# $out_dir_root:                   output directory and output root, concatenated
# $cmalign:                        cmalign executable
# $max_file_name_width:            num chars in max length of a file name
# $description_width:              num chars in description field of output
# $weight:                         esl-weight executable
# $indi_cm_name_AR:                reference to array of individual CM names
# $new_target_file_per_cm_name_HR: reference to hash, key CM name, value target file to align with that CM
# $cmscores2print_HR:              reference to hash of CM scores to print
# $sum_file:                       file to print output file notices to
#
# Returns:    Nothing.
#
# Exits:      If a cmalign call doesn't finish with a zero status
#             code. cmsearch should print an error message to
#             standard error if this occurs.
#  
####################################################################
sub align_subseqs { 
    my $narg_expected = 10;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, align_subseqs() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($opt_HR, $out_dir_root, $cmalign, $max_file_name_width, $description_width, $weight, $indi_cm_name_AR, $new_target_file_per_cm_name_HR, $cmscores2print_HR, $sum_file) = @_;

    my($i, $ncm, $m, $cm_file_name, $cm_name, $hits_file, $align_psecs, $cmalign_out, $cmalign_stk);
    my($cmalign_out2print, $cmalign_stk2print, $fil_cmalign_stk, $fil_cmalign_stk2print, $dashes1, $dashes2);
    my($line, $seq_name, $cmsc, $cmstructsc, $command, $tmp);
    my @elA = ();

    $dashes1 = ""; for($i = 0; $i < $max_file_name_width; $i++) { $dashes1 .= "-"; } 
    $dashes2 = ""; for($i = 0; $i < $description_width;   $i++) { $dashes2 .= "-"; } 
    print_string_to_file($sum_file, 1, sprintf("#\n"));
    print_string_to_file($sum_file, 1, sprintf("# Stage 2: Aligning each sequence to its best-matching model.\n"));
    print_string_to_file($sum_file, 1, sprintf("#\n"));
    print_string_to_file($sum_file, 1, sprintf("# %-*s  %s\n", $max_file_name_width, "output file name", "description"));
    print_string_to_file($sum_file, 1, sprintf("# %-*s  %-*s\n", $max_file_name_width, $dashes1, $description_width, $dashes2));

    $ncm = scalar(@{$indi_cm_name_AR});
    for($m = 1; $m <= $ncm; $m++) { 
	$cm_name = $indi_cm_name_AR->[($m-1)];
	if(exists($new_target_file_per_cm_name_HR->{$cm_name})) { # >= 1 sequences in this set were classified as the current CM
	    $hits_file      = $new_target_file_per_cm_name_HR->{$cm_name};
	    
	    $cmalign_out       = $out_dir_root . "." . $cm_name . ".cmalign";
	    $cmalign_out2print = $out_root     . "." . $cm_name . ".cmalign";
	    if($opt_HR->{"--filter"} ne "") { 
		$cmalign_stk           = $out_dir_root . "." . $cm_name . ".nf.stk";
		$cmalign_stk2print     = $out_root     . "." . $cm_name . ".nf.stk";
		$fil_cmalign_stk       = $out_dir_root . "." . $cm_name . ".stk";
		$fil_cmalign_stk2print = $out_root     . "." . $cm_name . ".stk";
	    }
	    else { 
		$cmalign_stk           = $out_dir_root . "." . $cm_name . ".stk";
		$cmalign_stk2print     = $out_root     . "." . $cm_name . ".stk";
	    }
	    
	    my $mxsize = $df_mxsize;
	    if($opt_HR->{"--mxsize"} ne "") { $mxsize = $opt_HR->{"--mxsize"}; }
	    my $prob_opt = "-p";
	    if($opt_HR->{"--no-prob"}) { $prob_opt = ""; }
	    $command = "$cmalign --cm-idx $m $prob_opt --mxsize $mxsize --sub -o $cmalign_stk $cm_file $hits_file > $cmalign_out 2>&1"; 
	    $tmp = `$command`;
	    if(($? >> 8) != 0) { 
		printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
	    }
	    
	    #open and parse the cmalign output
	    if(open(CMALIGN, $cmalign_out) == 0) { printf STDERR ("ERROR, could not open $cmalign_out for reading.\n"); exit(1); }
	    while($line = <CMALIGN>) { 
		if($line =~ s/^\s+//) { 
		    @elA = split(/\s+/, $line);
		    $seq_name = $elA[1];
		    $cmsc = $elA[3];
		    $cmstructsc = $elA[4];
		}
		$cmscores2print_HR->{$seq_name} = sprintf("%.2f %.2f", $cmsc, $cmstructsc);
	    }
	    close(CMALIGN);

	    if($opt_HR->{"--filter"} ne "") { 
		$command = "$weight -f --idf " . $opt_HR->{"--filter"} . " $cmalign_stk > $fil_cmalign_stk 2>&1";
		$tmp = `$command`;
		if(($? >> 8) != 0) { 
		    printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
		}
		print_string_to_file($sum_file, 1, sprintf("  %-*s  complete %s alignment\n", $max_file_name_width, $cmalign_stk2print, $cm_name));
		print_string_to_file($sum_file, 1, sprintf("  %-*s  filtered %s alignment\n", $max_file_name_width, $fil_cmalign_stk2print, $cm_name));
	    }
	    else { 
		print_string_to_file($sum_file, 1, sprintf("  %-*s  %s alignment\n", $max_file_name_width, $cmalign_stk2print, $cm_name));
	    }
	    print_string_to_file($sum_file, 1, sprintf("  %-*s  %s cmalign output\n", $max_file_name_width, $cmalign_out2print, $cm_name));
	}
    }
    return;
}


#####################################################################
# Subroutine: print_timing()
# Incept:     EPN, Tue Jun 16 08:52:08 2009
# 
# Purpose:    Print a timing in hhhh:mm:ss format to 1 second precision.
# 
# Arguments:
# $prefix:       string to print before the hhhh:mm:ss time info.
# $inseconds:    number of seconds
# $sum_file:     file to print output file notices to

#
# Returns:    Nothing, if it returns, everything is valid.
# 
####################################################################
sub print_timing { 
    my $narg_expected = 3;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, print_timing() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($prefix, $inseconds, $sum_file) = @_;
    my ($i, $hours, $minutes, $seconds, $thours, $tminutes, $tseconds);

    $hours = int($inseconds / 3600);
    $inseconds -= ($hours * 3600);
    $minutes = int($inseconds / 60);
    $inseconds -= ($minutes * 60);
    $seconds = $inseconds;
    $thours   = $hours;
    $tminutes = $minutes;
    $tseconds = $seconds;

    if($hours < 10)   { $thours   = "0" . $thours; }
    if($minutes< 10)  { $tminutes = "0" . $tminutes; }
    if($seconds< 10)  { $tseconds = "0" . $tseconds; }

    print_string_to_file($sum_file, 1, sprintf("%s %2s:%2s:%2s\n", $prefix, $thours, $tminutes, $tseconds));
}

#####################################################################
# Subroutine: print_scores_file
# Incept:     EPN, Tue Jun 16 14:39:38 2009
# 
# Purpose:    Print the scores file with CM and HMM scores.
#             We want to print a line for each target sequence, since
#             we only aligned those that scored above a threshold,
#             this means we have to revisit the target database and
#             read all the seqs.
#
# Arguments: 
# $target_file:        name of the target sequence filee
# $ncm                 number of CMs we've searched with
# $scores_file:        the name of the 'scores' file we'll print to
# $scores_file2print:  name of scores file as we print to screen
# $max_seq_name_width: num chars in max length sequence
# $indi_cm_name_AR:    reference to array of CM names
# $bestmatch_cm_HR:    reference to hash of best-matching CM for each sequence
# $cmscores2print_HR:  reference to hash with CM scores and CM structure scores
# $hmmscores2print_HR: reference to hash with HMM scores
# $sum_file:           file to print output file notices to
# 
# Returns:    Nothing, if it returns, everything is valid.
# 
####################################################################
sub print_scores_file { 
    my $narg_expected = 10;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, print_scores_file() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($target_file, $ncm, $scores_file, $scores_file2print, $max_seq_name_width, $indi_cm_name_AR, $bestmatch_cm_HR, $cmscores2print_HR, $hmmscores2print_HR, $sum_file) = @_;

    my ($seq_name, $cmscore2print);
    my ($i, $bestmatch_cm, $max_cm_name_width);
    my ($dashes_seqname, $dashes_cmname, $dashes1, $dashes2);
    my ($cmsc, $cmstructsc, $start, $end, $whmmsc, $secondhmm, $shmmsc);
    my ($best_string, $nleading_spaces, $ntrailing_spaces, $second_string, $idx, $line);

    $dashes_seqname = ""; for($i = 0; $i < $max_seq_name_width; $i++) { $dashes_seqname .= "-"; } 

    $max_cm_name_width = max_length_scalar_in_array($indi_cm_name_AR); 
    if($max_cm_name_width < length("best-matching model")) { $max_cm_name_width = length("best-matching model"); } 
    $dashes_cmname  = ""; for($i = 0; $i < $max_cm_name_width; $i++)  { $dashes_cmname .= "-"; } 
    
    if(open(SCORES,  ">" . $scores_file) == 0) { printf STDERR ("ERROR, could not open $scores_file for writing.\n"); exit(1); }
    if(open(TARGET, $target_file) == 0) { printf STDERR ("ERROR, could not open $target_file for reading.\n"); exit(1); }
    $i = 0;

    #print headers
    $dashes1 = ""; for($i = 0; $i < $max_cm_name_width + 39; $i++)  { $dashes1 .= "-"; } 
    $dashes2 = ""; for($i = 0; $i < $max_cm_name_width + 9;  $i++)  { $dashes2 .= "-"; } 

    # build column headers
    $best_string = "";
    $nleading_spaces  = int(($max_cm_name_width + 39 - length("best-matching model"))/2.);
    $ntrailing_spaces = ($max_cm_name_width + 39 - length("best-matching model")) - $nleading_spaces;
    for($i = 0; $i < $nleading_spaces;   $i++)  { $best_string .= " "; }
    $best_string .= "best-matching model";
    for($i = 0; $i < $ntrailing_spaces;  $i++)  { $best_string .= " "; }

    $second_string = "";
    $nleading_spaces  = int(($max_cm_name_width + 9 - length("second-best model"))/2.);
    $ntrailing_spaces = ($max_cm_name_width + 9 - length("second-best model")) - $nleading_spaces;
    for($i = 0; $i < $nleading_spaces;   $i++)  { $second_string .= " "; }
    $second_string .= "second-best model";
    for($i = 0; $i < $ntrailing_spaces;  $i++)  { $second_string .= " "; }

    printf SCORES ("# %7s  %-*s  %-*s", "", $max_seq_name_width, "", $max_cm_name_width + 39, $best_string);
    if($ncm > 1) { printf SCORES ("  %-*s", $max_cm_name_width + 9, $second_string); }
    printf SCORES ("\n");

    printf SCORES ("# %7s  %-*s  %-*s", "", $max_seq_name_width, "", $max_cm_name_width + 39, $dashes1);
    if($ncm > 1) { printf SCORES ("  %-*s", $max_cm_name_width + 9, $dashes2); }
    printf SCORES ("\n");

    printf SCORES ("# %7s  %-*s  %-*s  %4s  %4s  %7s  %7s  %7s", "idx", $max_seq_name_width, "sequence name", $max_cm_name_width, "model name",   "beg",  "end",  "CM sc",  "struct",  "HMM sc");
    if($ncm > 1) { printf SCORES ("  %-*s  %7s  %7s", $max_cm_name_width, "model name",   "HMM sc",  "HMMdiff"); }
    printf SCORES ("\n");

    printf SCORES ("# %7s  %-*s  %-*s  %4s  %4s  %7s  %7s  %7s", "-------", $max_seq_name_width, $dashes_seqname, $max_cm_name_width, $dashes_cmname, "----", "----", "-------", "-------", "-------");
    if($ncm > 1) { printf SCORES ("  %-*s  %7s  %7s", $max_cm_name_width, $dashes_cmname, "-------", "-------"); }
    printf SCORES ("\n");

    $idx = 1;
    while($line = <TARGET>) { 
	if($line =~ s/^\>//) { 
	    chomp $line;
	    $line =~ s/\s+.*$//;
	    $seq_name = $line;
	    if(exists($bestmatch_cm_HR->{$seq_name})) { 
		$bestmatch_cm = $bestmatch_cm_HR->{$seq_name};
		($cmsc, $cmstructsc)                         = split(/\s+/, $cmscores2print_HR->{$seq_name});
		($start, $end, $whmmsc, $secondhmm, $shmmsc) = split(/\s+/, $hmmscores2print_HR->{$seq_name});

		printf SCORES ("  %7d  %-*s  %-*s  %4d  %4d  %7.2f  %7.2f  %7.2f", $idx, $max_seq_name_width, $seq_name, $max_cm_name_width, $bestmatch_cm, $start, $end, $cmsc, $cmstructsc, $whmmsc);
		if($ncm > 1 && ($secondhmm ne $bestmatch_cm)) { printf SCORES ("  %-*s  %7.2f  %7.2f", $max_cm_name_width, $secondhmm, $shmmsc, ($whmmsc - $shmmsc)); }
		elsif($ncm > 1)                             { printf SCORES ("  %-*s  %7s  %7s",    $max_cm_name_width, "-", "-", "-"); }
	    }
	    else {
		printf SCORES ("  %7d  %-*s  %-*s  %4s  %4s  %7s  %7s  %7s", $idx, $max_seq_name_width, $seq_name, $max_cm_name_width, $df_none_name, "-", "-", "-", "-", "-");
		if($ncm > 1) { printf SCORES ("  %-*s  %7s  %7s", $max_cm_name_width, "-", "-", "-"); }
	    }
	    printf SCORES ("\n");
	    $idx++;
	}
    }
    close(TARGET);
    close(SCORES);
}


#################################################################
# Subroutine : argmax_arr()
# Incept:      EPN, Tue Nov  4 14:33:23 2008
# 
# Purpose : Return the index of the max value in an array.
#
# Arguments:
# $arr_R: reference to the array
# 
################################################################# 
sub argmax_array
{
    my $narg_expected = 1;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, argmax_arr() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($arr_R) = $_[0];

    my ($max, $i, $argmax);
    $max = $arr_R->[0];
    $argmax = 0;
    for($i = 1; $i < scalar(@{$arr_R}); $i++) { 
	if($arr_R->[$i] > $max) { $max = $arr_R->[$i]; $argmax = $i; }
    }
    return $argmax;
}


#################################################################
# Subroutine : max_length_scalar_in_arr()
# Incept:      EPN, Tue Nov  4 15:19:44 2008
# 
# Purpose:     Return the maximum length of a scalar in an array
#
# Arguments: 
# $arr_R: reference to the array
# 
################################################################# 
sub max_length_scalar_in_array {
    my $narg_expected = 1;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, max_length_scalar_in_arr() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($arr_R) = $_[0];

    my ($max, $i);
    $max = length($arr_R->[0]);
    for($i = 1; $i < scalar(@{$arr_R}); $i++) { 
	if(length($arr_R->[$i]) > $max) { $max = length($arr_R->[$i]); }
    }
    return $max;
}


###########################################################
# Subroutine: tempname() 
# Incept: EPN, Thu Oct 29 10:27:50 2009
# Source: Sean Eddy's 'sqc' script from the Easel 
#         sequence analysis library
#
# Sean's comments: 
# Should be robust. Uses the pid as part of the temp name
# to prevent other processes from clashing. A two-letter
# code is also added, so a given process can request
# up to 676 temp file names (26*26). An "satmp" code is
# also added to distinguish these temp files from those
# made by other programs.
#
# Returns nothing if it fails to get a temp file name.
#
# If TMPDIR is set, that directory is prepended to the
# name.
###########################################################
sub tempname {
    my $narg_expected = 0;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, tempname() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($dir, $name, $suffix);
    if(exists($ENV{'TMPDIR'})) { $dir = $ENV{'TMPDIR'} . "/"; }
    else                       { $dir = ""; }

    foreach $suffix ("aa".."zz") {
        $name = "$dir"."satmp".$suffix.$$;
        if (! (-e $name)) { 
            open(TMP,">$name") || die "ERROR, creating temporary file name $name.\n"; # Touch it to reserve it
            close(TMP);
            return "$name"; 
        }
    }                           
}


###########################################################
# Subroutine: print_string_to_file()
# Incept: EPN, Thu Oct 29 10:47:25 2009
#
# Purpose: Given a string and a file name, append the 
#          string to the file, and potentially to stdout
#          as well. If $filename is the empty string,
#          don't print to a file. 
#
# Returns: Nothing. If the file can't be written to 
#          an error message is printed and the program
#          exits.
#
###########################################################
sub print_string_to_file {
    my $narg_expected = 3;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, print_string_to_file() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($filename, $print_to_stdout, $string) = @_;

    if($filename ne "") { 
	open(OUT, ">>" . $filename) || die "ERROR, couldn't open $filename for appending.\n";
	printf OUT $string;
	close(OUT);
    }

    if($print_to_stdout) { 
	printf($string);
    }
    return;
}


