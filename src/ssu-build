#!/usr/bin/perl
#
# ssu-build
# Eric Nawrocki
# EPN, Wed Oct 14 06:57:00 2009
#
# Usage: ssu-build <alignment file to build CM from>
#             
# Synopsis:
# Builds a CM from an input stockholm alignment using cmbuild parameters 
# that are recommended for building SSU CMs. Optionally, with --num, 
# the alignment is only processed, by defining and numbering consensus columns 
# and exiting. With -t <s>, where <s> = "<x>-<y>", the alignment is first 
# truncated, by removing columns that come before consensus column <x> and
# <y>, and then the truncated aligment is used to build the model.
#
# See definition of $options_usage for options, below.
#
use Getopt::Long;
use Cwd 'abs_path';
use strict;

my $df_gapthresh = 0.80;
my $total_time = -1 * time();
my $usage =  "Usage: ssu-build [options] <Stockholm alignment file to build CM from>\n";
   $usage .= "Usage: ssu-build [options] -d <name of default ssu-align-0.1 seed alignment>\n";
   $usage .= "                                  ('archaea' or 'bacteria' or 'eukarya')\n";
my $options_usage  = "where general options are:\n";
#                           1         2         3         4         5         6         7         8
#                  12345678901234567890123456789012345678901234567890123456789012345678901234567890
$options_usage .= "  -h            : show brief help on version and usage\n";
$options_usage .= "  -d            : command-line argument is a default ssu-align-0.1 seed alnment\n";
$options_usage .= "  -F            : force; allow overwriting of CM file\n" ,
$options_usage .= "  -o <s>        : name the CM *file* <s>\n";
$options_usage .= "  -n <s>        : name the CM <s>\n";
$options_usage .= "  -1            : output alignment(s) in non-interleaved, 1 line/seq format\n";
$options_usage .= "  --append <s>  : append this model to CM file <s>\n";
$options_usage .= "  --key-out <s> : add <s> to all output file names, before the suffix\n";
$options_usage .= "\noptions for building a model from a truncated version of the alignment:\n";
$options_usage .= "  --trunc <s> : only include consensus columns from <x> to <y> (where <s> =\"<x>-<y>\")\n";
$options_usage .= "\noptions for numbering alignment consensus columns (no model will be built):\n";
$options_usage .= "  --num <n> : output alignment with consensus columns numbered\n";
$options_usage .= "\nexpert options for model construction:\n";
$options_usage .= "  --gapthresh <x> : set fraction of gaps to allow in a consensus column to <x> (default: 0.8)\n";
$options_usage .= "  --rf            : use consensus column (#=GC RF) annotation in alignment\n";
$options_usage .= "  --eent          : use 'entropy weighting' method to achieve target relative entropy\n";
$options_usage .= "  --ere <x>       : with --eent, set target relative entropy as <x>\n";
$options_usage .= "\noptions for output of secondary structure diagram, only relevant with -d and -t:\n";
$options_usage .= "  --rm-ps : if ps2pdf is in your path, convert ps to pdf and delete postscripts\n";

###################
# Process options #
###################
my %opt_H = ();
$opt_H{"-h"}          = 0;
$opt_H{"-d"}          = 0;
$opt_H{"-F"}          = 0;
$opt_H{"-o"}          = "";
$opt_H{"-n"}          = "";
$opt_H{"-1"}          = 0;
$opt_H{"--append"}    = "";
$opt_H{"--key-out"}   = "";
$opt_H{"--trunc"}     = "";
$opt_H{"--num"}       = "";
$opt_H{"--gapthresh"} = "";
$opt_H{"--rf"}        = 0;
$opt_H{"--eent"}      = 0;
$opt_H{"--ere"}       = "";
$opt_H{"--ps2pdf"}    = 0;
$opt_H{"--ps-keep"}   = 0;

Getopt::Long::Configure ("bundling");
my $opt_return = GetOptions
    ('h'           => \$opt_H{"-h"}, 
     'd'           => \$opt_H{"-d"},
     'F'           => \$opt_H{"-F"},
     'o=s'         => \$opt_H{"-o"},
     'n=s'         => \$opt_H{"-n"},
     '1'           => \$opt_H{"-1"},
     'append=s'    => \$opt_H{"--append"},
     'key-out=s'   => \$opt_H{"--key-out"},
     't=s'         => \$opt_H{"--trunc"},
     'num'         => \$opt_H{"--num"},
     'gapthresh=f' => \$opt_H{"--gapthresh"},
     'rf'          => \$opt_H{"--rf"},
     'eent'        => \$opt_H{"--eent"},
     'ere=f'       => \$opt_H{"--ere"},
     'ps2pdf'      => \$opt_H{"--ps2pdf"},
     'ps-keep'     => \$opt_H{"--ps-keep"});
 
if($opt_return != 1) { exit(1); }

if ($opt_H{"-h"}) { print $usage . "\n"; print $options_usage; exit(1); } 

my $key_out;
if($opt_H{"--key-out"}  ne "") { $key_out   = "." . opt_H{"--key-out"};  }

##############################################################################
# Determine the "mode" to run and check for incompatible option combinations.#
##############################################################################
# There are only 2 possible modes, they are exclusive.
my $do_build_mode  = 1; # default mode, build a CM
my $do_number_mode = 0; # number alignment columns and exit
if($opt_H{"--num"}) {
    $do_build_mode  = 0;
    $do_number_mode = 1;
}

# In build mode, we may also optionally truncate the alignment
if($opt_H{"--trunc"} ne "") { 
    #check if the -t argument is valid
    if($opt_H{"--trunc"} =~ /(\d+)\-(\d+)/) { 
	if($1 > $2) { 
	    printf STDERR ("\nERROR, formatting of the -t argument " . $opt_H{"--trunc"} . " is invalid.\nFirst number must be less than the second; such as \"-t 822-930\"\n"); 
	    exit(1);
	}
    }
    elsif($opt_H{"--trunc"} =~ /(\d+)\:(\d+)/) { 
	if($1 > $2) { 
	    printf STDERR ("\nERROR, formatting of the -t argument " . $opt_H{"--trunc"} . " is invalid.\nFirst number must be less than the second; such as \"-t 822:930\"\n");
	    exit(1);
	}
    }
    elsif($opt_H{"--trunc"} =~ /(\d+)\.+(\d+)/) { 
	if($1 > $2) { 
	    printf STDERR ("\nERROR, formatting of the -t argument " . $opt_H{"--trunc"} . " is invalid.\nFirst number must be less than the second; such as \"-t 822..930\"\n");
	    exit(1);
	}
    }
    else { 
	printf STDERR ("\nERROR, formatting of the -t argument " . $opt_H{"--trunc"} . " is invalid.\nIt must include two integers separated by a \"-\"; such as \"-t 822-930\"\n");
	exit(1);
    }
}

# In build mode, if we're truncating we may also want to try to draw a secondary structure diagram
# of the truncation, but only if -d and --gapthresh not enabled (or set to default)
my $do_draw = 0;
if(($opt_H{"--trunc"} ne "") && 
   ($opt_H{"-d"})            && 
   (($opt_H{"--gapthresh"} eq "") || ($opt_H{"--gapthresh"} == $df_gapthresh))) 
{ 
    $do_draw = 1; 
}

if($opt_H{"--num"}) { 
    # --num is incompatible with all other options except --rf, --key-out, --gapthresh and -1
    if(($opt_H{"-F"}) || 
       ($opt_H{"-o"}          ne "") ||
       ($opt_H{"-n"}          ne "") ||
       ($opt_H{"--append"}    ne "") ||
       ($opt_H{"--trunc"}     ne "") ||
       ($opt_H{"--eent"})            ||
       ($opt_H{"--ere"}       ne "") ||
       ($opt_H{"--ps2pdf"})          ||
       ($opt_H{"--ps-keep"})) {
	printf STDERR ("\nERROR, --num is incompatible with all other options except for --rf, -1, --gapthresh and --key-out.\n"); exit(1);
    }
}
if(($opt_H{"--ere"} ne "") && (! ($opt_H{"--eent"}))) { 
    printf STDERR ("\nERROR, if --ere is enabled, --eent must also be enabled.\n"); exit(1); 
}
if(($opt_H{"--append"} ne "") && (($opt_H{"-o"}) ne "")) { 
    printf STDERR ("\nERROR, --append is incompatible with -o.\n"); exit(1); 
}
if(($opt_H{"--rf"}) && (($opt_H{"--gapthresh"}) ne "")) { 
    printf STDERR ("\nERROR, --rf is incompatible with --gapthresh.\n"); exit(1); 
}

################
# Print banner #
################
my @log2printA = ();
print_banner($0, \%opt_H, \@ARGV, \@log2printA);

if(scalar(@ARGV) != 1) {   
    print "Incorrect number of command line arguments.\n";
    print $usage;
    print "\nTo see more help on available options, do ssu-draw -h\n\n";
    exit(1);
}
my ($aln_file_or_model_name) = $ARGV[0];

##################################################################
# Validate that everything is go and determine output file names #
##################################################################
my ($aln_file, $cmbuild, $cm_file, $cm_name, $alimanip, $ssdraw, $template_file, $num_aln_file, $trunc_aln_file, $log_file, $ps2pdf, $ps_file, $pdf_file);
validate_and_setup($aln_file_or_model_name, $key_out, \%opt_H, $do_build_mode, $do_number_mode, $do_draw, 
		   \$aln_file, \$cmbuild, \$cm_file, \$cm_name, \$alimanip, \$ssdraw, \$template_file, \$ps2pdf, \$ps_file, \$pdf_file, \$num_aln_file, \$trunc_aln_file, \$log_file);
#####################
# Handle Build mode #
#####################
my $ssdraw_failed_at_least_once = 0;
my $ssdraw_worked_at_least_once = 0;
my $gapthresh = $opt_H{"--gapthresh"};
my $build_aln_file;
if($gapthresh eq "")  { $gapthresh = $df_gapthresh; }

if($do_build_mode) 
{ 
    if($opt_H{"--trunc"} ne "") { 
	run_alimanip_to_truncate($alimanip, $aln_file, $trunc_aln_file, $gapthresh, \%opt_H, \@log2printA);
	$build_aln_file = $trunc_aln_file
    }	
    else { 
	$build_aln_file = $aln_file;
    }
    run_cmbuild($cmbuild, $build_aln_file, $cm_file, $cm_name, $gapthresh, \%opt_H, \@log2printA);

    if($do_draw) { 
	my $ret_val = run_ssdraw($ssdraw, $template_file, $aln_file, $ps_file, $pdf_file, $ps2pdf, \%opt_H, \@log2printA);
    }
}    

######################
# Handle Number mode #
######################
if($do_number_mode) 
{ 
    run_alimanip_to_number($alimanip, $aln_file, $num_aln_file, $gapthresh, \%opt_H, \@log2printA);
}

push(@log2printA, sprintf("#\n"));
printf($log2printA[(scalar(@log2printA)-1)]);
push(@log2printA, sprintf("# This output saved to log file: $log_file.\n"));
printf($log2printA[(scalar(@log2printA)-1)]);
print_log($log_file, \@log2printA);

exit(0);


###############
# subroutines #
###############

#####################################################################
# Subroutine: print_banner()
# Incept:     EPN, Wed Oct 14 13:53:05 2009
# 
# Purpose:    Print the ssu-build banner.
#
# Arguments: 
#    $script_call:     call used to invoke this (ssu-build) script
#    $opt_HR:          REFERENCE to hash of command-line options
#    $argv_ref:        reference to @ARGV, command-line arguments
#    $log2printAR:     reference to log2print array with flog file text
#
# Returns:    Nothing, if it returns, everything is valid.
# 
####################################################################
sub print_banner { 
    my $narg_expected = 4;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, print_banner() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($script_call, $opt_HR, $argv_ref, $log2printAR) = @_;
    my ($i, $script_name, $start_log_line);

    my $enabled_options;
    if($opt_HR->{"-h"})                { $enabled_options .= " -h"; }
    if($opt_HR->{"-d"})                { $enabled_options .= " -d"; }
    if($opt_HR->{"-F"})                { $enabled_options .= " -F"; }
    if($opt_HR->{"-o"}          ne "") { $enabled_options .= " -o " .          $opt_HR->{"-o"}; }
    if($opt_HR->{"--append"}    ne "") { $enabled_options .= " --append" .     $opt_HR->{"--append"}; }
    if($opt_HR->{"--key-out"}   ne "") { $enabled_options .= " --key-out " .   $opt_HR->{"--key-out"}; }   
    if($opt_HR->{"--trunc"}     ne "") { $enabled_options .= " -t " .          $opt_HR->{"--trunc"}; }
    if($opt_HR->{"--num"})             { $enabled_options .= " --num"; }  
    if($opt_HR->{"--gapthresh"} ne "") { $enabled_options .= " --gapthresh " . $opt_HR->{"--gapthresh"}; } 
    if($opt_HR->{"--rf"})              { $enabled_options .= " --rf"; }  
    if($opt_HR->{"--eent"})            { $enabled_options .= " --eent"; }
    if($opt_HR->{"--ere"}       ne "") { $enabled_options .= " --ere " .       $opt_HR->{"--ere"}; }
    if($opt_HR->{"--ps2pdf"})          { $enabled_options .= " --ps2pdf"; }  
    if($opt_HR->{"--ps-keep"})         { $enabled_options .= " --ps-keep"; }  

    $script_call =~ s/^\.+\///;
    $script_name = $script_call;
    $script_name =~ s/.+\///;

    $start_log_line = scalar(@{$log2printAR});

    push(@{$log2printAR}, sprintf("\# $script_name :: build SSU rRNA covariance models\n"));
    push(@{$log2printAR}, sprintf("\# SSU-ALIGN 0.1 (October 2009)\n"));
    push(@{$log2printAR}, sprintf("\# Copyright (C) 2009 HHMI Janelia Farm Research Campus\n"));
    push(@{$log2printAR}, sprintf("\# Freely distributed under the GNU General Public License (GPLv3)\n"));
    push(@{$log2printAR}, sprintf("\# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"));
    push(@{$log2printAR}, sprintf("%-10s %s ", "# command:", $script_call . $enabled_options));
    for($i = 0; $i < scalar(@{$argv_ref}) - 1; $i++) { 
	push(@{$log2printAR}, sprintf("$argv_ref->[$i] "));
    }
    push(@{$log2printAR}, sprintf("$argv_ref->[$i]\n"));
    push(@{$log2printAR}, sprintf("%-10s ", "# date:"));
    push(@{$log2printAR}, sprintf(scalar localtime()));
    push(@{$log2printAR}, sprintf("\n"));

    for($i = $start_log_line; $i < scalar(@{$log2printAR}); $i++) { 
	printf($log2printAR->[$i]);
    }
    return;
}


#####################################################################
# Subroutine: validate_and_setup()
# Incept:     EPN, Mon Nov  3 15:05:56 2008
# 
# Purpose:    Validation and setup:
#             - validate that the alignment file exists
#             - validate that the required executable programs exist.
#             - validate that the CM file we're building does not exist (unless -F or -A)
#             - determine name for output '.log' file
#             - determine name for numbered alignment file (we may or may not need this)
#             - determine name for truncated alignment file (we may or may not need this)
#             - determine the name for the CM, or leave it as empty string for cmbuild automatic naming 
#             - determine the name for ps and pdf files, if $do_draw is true
#
# Arguments: 
# $aln_file_or_model_name: the alignment file we'll build CM from (or number columns for), 
#                          or the default ssu-align-0.1 model name (if -d enabled)
# $key_out:            string to append to names of output files
# $opt_HR:             reference to the hash of command-line options
# $do_build_mode:      TRUE if we're in build mode (will build a CM)
# $do_number_mode:     TRUE if we're in number mode, we'll not build a CM
# $do_draw:            TRUE to set up variables to attempt and esl-ssdraw later
# $aln_file_ref:       RETURN; the path to the alignment file we'll use
# $cmbuild_ref:        RETURN; the cmbuild command
# $cm_file_ref:        RETURN; the path to the CM file we'll write to
# $cm_name_ref:        RETURN; the name for the CM (will be empty string if we want cmbuild auto naming)
# $alimanip_ref:       RETURN; the esl-alimanip command (only nec if building truncated model)
# $ssdraw_ref:         RETURN; the esl-ssdraw command (only nec if building truncated model)
# $template_file_ref:  RETURN; the path to the template file for ssdraw (only nec if building truncated model)
# $ps2pdf_ref:         RETURN; the ps2pdf command, or "" if it doesn't work or is irrelevant
# $ps_file_ref:        RETURN; the postscript file we may or may not create
# $pdf_file_ref:       RETURN; the pdf file we may or may not create
# $num_aln_file_ref:   RETURN; the path to the numbered aln file we may or may not create
# $trunc_aln_file_ref: RETURN; the path to the truncated aln file we may or may not create
# $log_file_ref:       RETURN; the path and name of what will become the log output file
#
# Returns:    Nothing, if it returns, everything is valid.
# 
# Exits:      If any of the above validations do not occur, we
#             print a message to STDERR explaining why it's
#             exiting early and then exit with non-zero status.
#
####################################################################
sub validate_and_setup { 
    my $narg_expected = 19;
    if(scalar(@_) != $narg_expected) { printf STDERR ("\nERROR, validate_and_setup() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my($aln_file_or_model_name, $key_out, $opt_HR, $do_build_mode, $do_number_mode, $do_draw, $aln_file_ref, $cmbuild_ref, 
       $cm_file_ref, $cm_name_ref, $alimanip_ref, $ssdraw_ref, $template_file_ref, $ps2pdf_ref, $ps_file_ref, $pdf_file_ref, $num_aln_file_ref, $trunc_aln_file_ref, $log_file_ref) = @_;

    my ($aln_file, $root);
    #Validate that the alignment file exists, unless -d.
    if(!($opt_HR->{"-d"})) { 
	$aln_file = $aln_file_or_model_name;
	if(!(-e $aln_file)) { printf STDERR ("\nERROR, alignment file $aln_file does not exist.\n"); exit(1); }
	$root = $aln_file; 
	$root =~ s/.+\///;  #remove directory path
	if($root =~ s/\.stk$//)    { ; }
	elsif($root =~ s/\.sto$//) { ; }
	# otherwise we'll just append '.cm' to the full name of the alignment file
    }
    else { #-d enabled, $aln_file is actually the name of a default ssu-align-0.1 model (or should be), try to find it
	my $ssualigndir = $ENV{'SSUALIGNDIR'};
	if(! exists($ENV{'SSUALIGNDIR'})) { 
	    printf STDERR ("\nERROR, the SSUALIGNDIR environment variable should be set but it's not.\nFor help, see the User's Guide Installation section.\n"); exit(1);
	    exit(1); 
	}
	$aln_file = $ssualigndir . "\/" . $aln_file_or_model_name . "-0p1.stk";
	if(!(-e $aln_file)) { printf STDERR ("\nERROR, -d enabled, specifying use of default ssu-align-0.1 alignment file:\n$aln_file,\nbut it does not exist.\nValid options command-line argument with -d are \"archaea\", \"bacteria\", or \"eukarya\".\n"); exit(1); }
	$root = $aln_file_or_model_name . "-0p1-sb";
    }
    if($opt_HR->{"-o"} ne "") { 
	$root = $opt_HR->{"-o"};
	$root =~ s/\.cm//; # remove .cm if it's there
    }
    my $num_aln_file   = $root . $key_out . ".num.stk";

    #determine truncated aln file name (we may or may not create this alignment
    my $trunc_aln_file = "";
    if($opt_HR->{"--trunc"} ne "") { 
	my ($start, $end);
	if   ($opt_HR->{"--trunc"} =~ /(\d+)\-(\d+)/)  { $start = $1; $end   = $2; }
	elsif($opt_HR->{"--trunc"} =~ /(\d+)\:(\d+)/)  { $start = $1; $end   = $2; }
	elsif($opt_HR->{"--trunc"} =~ /(\d+)\.+(\d+)/) { $start = $1; $end   = $2; }
	else { 
	    printf STDERR ("\nERROR, formatting of the -t argument " . $opt_H{"--trunc"} . " is invalid.\nIt must include two integers separated by a \"-\"; such as \"-t 822-930\"\n");
	    exit(1);
	}
	$root .= "." . $start . "-" . $end;
	$trunc_aln_file = $root . $key_out . ".stk";
    }
    # determine CM name, if -d or -t we will set it as the $root, if -n <s> enabled, set it as <s>,
    # otherwise, let cmbuild name it (by leaving it as "").
    my $cm_name = "";
    if($opt_HR->{"-n"} ne "")                           { $cm_name = $opt_HR->{"-n"}; }
    elsif(($opt_HR->{"-d"}) || ($opt_HR->{"--trunc"} ne "")) { $cm_name = $root; }
    
    my $log_file = $root . $key_out . ".ssu-build.log";

    my $cm_file = "";
    my $cmbuild = "";
    my $trash = "";
    my $alimanip = "";
    if($do_build_mode) { 
	if($opt_HR->{"--append"} ne "") { 
	    $cm_file = $opt_HR->{"--append"};
	    if(!(-e $cm_file)) { 
		printf STDERR ("\nERROR, --append $cm_file enabled, but $cm_file does not exist.\n"); exit(1); 
	    }
	}
	else { 
	    if($opt_HR->{"-o"} ne "") { # we've already checked that user did not enable both -o and --append (before printing banner in main)
		$cm_file = $opt_HR->{"-o"};
	    }
	    else { 
		$cm_file = $root . ".cm";
	    }
	    if(-e $cm_file) { 
		if(!($opt_HR->{"-F"})) { 
		    printf STDERR ("ERROR, CM file $cm_file already exists. Delete it or use -F to overwrite it.\n"); exit(1); 
		}
	    }
	}

	#Validate that ssu-cmbuild exists and is in path
	$cmbuild = "ssu-cmbuild";
	$trash = `$cmbuild -h`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $cmbuild is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
    }

    my $alimanip = "";
    my $ssdraw = "";
    my $template_file = "";
    my $ps2pdf = "";
    my $ps_file = "";
    my $pdf_file = "";

    if(($opt_HR->{"--trunc"}) || $do_number_mode) { 
	# verify that we can run esl-alimanip
	$alimanip = "ssu-esl-alimanip";
	$trash = `$alimanip -h`;
	if($? == -1) { printf STDERR ("\nERROR, the required executable $alimanip is not in your PATH environment\nvariable. See the User's Guide Installation section.\n"); exit(1); } 
    }

    # if $do_draw (passed in), we'll try to draw a secondary structure diagram showing the part of the model included/excluded by the truncation,
    # if we can find the template file and esl-ssdraw, also we determine if we can find ps2pdf here.
    if($do_draw) { 
	my $ssualigndir = $ENV{'SSUALIGNDIR'};
	if(! exists($ENV{'SSUALIGNDIR'})) { 
	    printf STDERR ("\nERROR, the SSUALIGNDIR environment variable should be set but it's not.\nFor help, see the User's Guide Installation section.\n"); exit(1);
	    exit(1); 
	}
	$template_file = $ssualigndir . "/ssu-align-0p1.ps";
	if(!(-e $template_file)) { $template_file = ""; }

	if($template_file ne "") { 
	    $ssdraw = "ssu-esl-ssdraw";
	    $trash = `$ssdraw -h`;
	    if($? == -1) { $ssdraw = ""; }
	}
	
	$ps_file = $root . $key_out . ".ps";
	$pdf_file = $root . $key_out . ".pdf";

	# is ps2pdf executable?
	$ps2pdf = "ps2pdf";
	$trash = `$ps2pdf 2>&1`;
	if($? == -1) { 
	    $ps2pdf = ""; 
	    if($opt_HR->{"--rm-ps"}) { printf STDERR ("\nERROR, --rm-ps was enabled, but ps2pdf is not in your path, so postscripts are the only output option for structure diagrams and --rm-ps is invalid.\n"); exit(1); }
	}
    }

    $$aln_file_ref       = $aln_file;
    $$cmbuild_ref        = $cmbuild;
    $$cm_file_ref        = $cm_file;
    $$cm_name_ref        = $cm_name;
    $$alimanip_ref       = $alimanip;
    $$ssdraw_ref         = $ssdraw;
    $$template_file_ref  = $template_file;
    $$ps2pdf_ref         = $ps2pdf;
    $$ps_file_ref        = $ps_file;
    $$pdf_file_ref       = $pdf_file;
    $$num_aln_file_ref   = $num_aln_file;
    $$trunc_aln_file_ref = $trunc_aln_file;
    $$log_file_ref       = $log_file;

    return;
}

#####################################################################
# subroutine: run_cmbuild()
# incept:     EPN, Wed Oct 14 14:29:00 2009
# 
# Purpose:    Run cmbuild on an alignment file to create CM(s).
#
# Arguments:  
#   $cmbuild:          path and name of cmbuild/ssu-cmbuild executable
#   $aln_file:         path and name of alignment file to build CM from
#   $cm_file:          path and name of CM file to create/write to
#   $cm_name:          name for CM (set in validate_and_setup(), if "" let cmbuild automatically name it)
#   $gapthresh:        gap threshold to use when building the model
#   $opt_HR:           reference to the hash of command-line options
#   $log2printAR:      reference to log2print array with log file text
# 
# Returns:  Nothing, if it returns, everything is valid.
# 
####################################################################
sub run_cmbuild {
    my $narg_expected = 7;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, run_cmbuild() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($cmbuild, $aln_file, $cm_file, $cm_name, $gapthresh, $opt_HR, $log2printAR) = @_;

    my $extra_opts = "";

    if($opt_HR->{"--append"} ne "") { $extra_opts .= " -A "; }
    if($opt_HR->{"--rf"})           { $extra_opts .= " --rf " . $opt_HR->{"--rf"}; }
    if($opt_HR->{"-F"})             { $extra_opts .= " -F"; }

    if($opt_HR->{"--eent"})  { $extra_opts .= " --eent"; }
    else                  { $extra_opts .= " --enone"; }
    if($opt_HR->{"--ere"})   { $extra_opts .= " --ere " . $opt_HR->{"--ere"}; }

    if($cm_name ne "") { $extra_opts .= " -n $cm_name"; }
    
    push(@{$log2printAR}, sprintf("#\n# Building CM(s)...\n"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    push(@{$log2printAR}, sprintf("#\n"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    
    my $command = "$cmbuild $extra_opts --gapthresh $gapthresh $cm_file $aln_file 2>&1";
    my $tmp = `$command`;
    if(($? >> 8) != 0) { 
	printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
    }
    
    my @tmpA = split("\n", $tmp);
    my ($i, $line);
    my $ncm       = 0;
    my @cm_nameA  = ();
    my @nseqA     = ();
    my @eff_nseqA = ();
    my @alenA     = ();
    my @clenA     = ();
    my @bpsA      = ();
    my @bifA      = ();
    my @cm_reA    = ();
    my @hmm_reA   = ();
    my $max_width_name = length("CM name"); 
    my $max_width_file = length($cm_file);
    if($max_width_file < length("CM file name")) { $max_width_file = length("CM file name"); }
    foreach $line (@tmpA) { 
	  ######################################################################################
	  # Example cmbuild output:
	  #
          #  aln  cm idx  name         nseq  eff_nseq    alen   clen   bps  bifs     CM    HMM
          # ----  ------  -------  --------  --------  ------  -----  ----  ----  -----  -----
          #    1       1  archaea        23     23.00    1563   1508   471    30  1.434  1.235
	  ######################################################################################
	if($line =~ /^\s*\d+\s+\d+\s+(\S+)\s+(\d+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)/) { 
	    push(@cm_nameA,  $1);
	    push(@nseqA,     $2); 
	    push(@eff_nseqA, $3); #not printed
	    push(@alenA,     $4); 
	    push(@clenA,     $5);
	    push(@bpsA,      $6); 
	    push(@bifA,      $7); #not printed
	    push(@cm_reA,    $8); #not printed
	    push(@hmm_reA,   $9); #not printed
	    if(length($1) > $max_width_name) { $max_width_name = length($1); }
	    $ncm++;
	}
    }

    my $dashes_file = ""; for($i = 0; $i < $max_width_file; $i++) { $dashes_file .= "-"; }
    my $dashes_name = ""; for($i = 0; $i < $max_width_name; $i++) { $dashes_name .= "-"; }
    if($ncm > 0) { 
	push(@{$log2printAR}, sprintf("# %-*s  %-*s  %6s  %9s  %9s  %4s\n", $max_width_file, "", $max_width_name, "", "num", "alignment", "consensus", "num"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	push(@{$log2printAR}, sprintf("# %-*s  %-*s  %6s  %9s  %9s  %4s\n", $max_width_file, "CM file name", $max_width_name, "CM name", "seqs", "length", "length", "bps"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	push(@{$log2printAR}, sprintf("# %-*s  %-*s  %6s  %9s  %9s  %4s\n", $max_width_file, $dashes_file, $max_width_name, $dashes_name, "------", "---------", "---------", "----"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);

	for($i = 0; $i < $ncm; $i++) { 
	    push(@{$log2printAR}, sprintf("  %-*s  %-*s  %6s  %9s  %9s  %4s\n", $max_width_file, $cm_file, $max_width_name, $cm_nameA[$i], $nseqA[$i], $alenA[$i], $clenA[$i], $bpsA[$i]));
	    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	}
    }
    return;
}


#####################################################################
# subroutine: run_alimanip_to_number()
# incept:     EPN, Fri Oct 16 14:08:22 2009
# 
# Purpose:    Run esl-alimanip/ssu-esl-alimanip on an alignment file 
#             to number the consensus columns within it. This is only 
#             called if --num is enabled. 
#
# Arguments:  
#   $alimanip:         path and name of esl-alimanip/ssu-esl-alimanip executable
#   $aln_file:         path and name of alignment file we want to number
#   $num_aln_file:     path and name of the numbered alignment file we'll create here
#   $gapthresh:        gap threshold to use when building the model
#   $opt_HR:           reference to the hash of command-line options
#   $log2printAR:      reference to log2print array with log file text
# 
# Returns:  Nothing, if it returns, everything is valid.
# 
####################################################################
sub run_alimanip_to_number{
    my $narg_expected = 6;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, run_alimanip_to_number() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($alimanip, $aln_file, $num_aln_file, $gapthresh, $opt_HR, $log2printAR) = @_;

    my $extra_opts = "";
    if(!($opt_HR->{"--rf"})) { # if --rf enabled, we don't redefine consensus columns
	$extra_opts .= " -g --gapthresh $gapthresh";
    }

    if($opt_HR->{"--num"} && (! $opt_HR->{"--rf"})) { 
	$extra_opts .= " --num-rf"; 
	push(@{$log2printAR}, sprintf("#\n# Defining and numbering consensus columns and all columns in alignment file...\n"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    }
    if($opt_HR->{"--num"} && ($opt_HR->{"--rf"})) { 
	$extra_opts .= " --num-rf"; 
	push(@{$log2printAR}, sprintf("#\n# Numbering consensus columns and all columns in alignment file...\n"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    }
    push(@{$log2printAR}, sprintf("#\n"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    
    my $command = "$alimanip $extra_opts -o $num_aln_file $aln_file 2>&1";
    my $tmp = `$command`;
    #printf("$command\n");
    if(($? >> 8) != 0) { 
	printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
    }

    my $max_width = length($num_aln_file);
    if($max_width < length("output aln file")) { $max_width = length("output aln file"); }; 
    my $i;
    my $dashes = ""; for($i = 0; $i < $max_width; $i++) { $dashes .= "-"; }

    push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, "output aln file"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, $dashes));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    push(@{$log2printAR}, sprintf("  %-*s\n", $max_width, $num_aln_file));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);

    return;
}

#####################################################################
# subroutine: run_alimanip_to_truncate()
# incept:     EPN, Fri Oct 16 16:20:17 2009
# 
# Purpose:    Run esl-alimanip/ssu-esl-alimanip on an alignment file 
#             to remove leading and trailing columns of the alignment
#             as specified by range <x>..<y> for consensus alignment columns 
#             <x> and <y> (with -t <s>, where <s> = "<x>-<y>").
#
# Arguments:  
#   $alimanip:           path and name of esl-alimanip/ssu-esl-alimanip executable
#   $aln_file:           path and name of alignment file to build CM from
#   $trunc_aln_file:     path and name of truncated alignment file we'll create
#   $gapthresh:          gap threshold to use when building the model
#   $opt_HR:             reference to the hash of command-line options
#   $log2printAR:        reference to log2print array with log file text
# 
# Returns:  Nothing, if it returns, everything is valid.
# 
####################################################################
sub run_alimanip_to_truncate{
    my $narg_expected = 6;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, run_alimanip_to_truncate() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($alimanip, $aln_file, $trunc_aln_file, $gapthresh, $opt_HR, $log2printAR) = @_;

    # sanity check
    if($opt_H{"--trunc"} eq "") { printf STDERR ("ERROR, run_alimanip_to_truncate() entered, but -t option argument is the empty string. This shouldn't happen.\n"); exit(1); }

    #determine start and end positions:
    my ($start, $end);
    if   ($opt_HR->{"--trunc"} =~ /(\d+)\-(\d+)/)  { $start = $1; $end   = $2; }
    elsif($opt_HR->{"--trunc"} =~ /(\d+)\:(\d+)/)  { $start = $1; $end   = $2; }
    elsif($opt_HR->{"--trunc"} =~ /(\d+)\.+(\d+)/) { $start = $1; $end   = $2; }
    else { 
	printf STDERR ("\nERROR, formatting of the -t argument " . $opt_H{"--trunc"} . " is invalid.\nIt must include two integers separated by a \"-\"; such as \"-t 822-930\"\n");
	exit(1);
    }

    my $extra_opts = "";
    if($opt_HR->{"--rf"}) { 
	# extra_opts remain empty (we checked for incompatible option combo of --rf and --gapthresh already)
	push(@{$log2printAR}, sprintf("#\n# Truncating alignment; saving only columns between predefined consensus\n\# columns $start and $end...\n"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    }
    else { 
	$extra_opts = "-g --gapthresh $gapthresh";
	push(@{$log2printAR}, sprintf("#\n# Truncating alignment; defining consensus columns and saving those\n\# between consensus columns $start and $end...\n"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    }
    push(@{$log2printAR}, sprintf("#\n"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    
    my $command = "$alimanip $extra_opts --start-rf $start --end-rf $end -o $trunc_aln_file $aln_file 2>&1";
    my $tmp = `$command`;
    #printf("$command\n");
    if(($? >> 8) != 0) { 
	printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); 
    }

    my $max_width = length($trunc_aln_file);
    if($max_width < length("output aln file")) { $max_width = length("output aln file"); }; 
    my $i;
    my $dashes = ""; for($i = 0; $i < $max_width; $i++) { $dashes .= "-"; }

    push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, "output aln file"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, $dashes));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    push(@{$log2printAR}, sprintf("  %-*s\n", $max_width, $trunc_aln_file));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);

    return;
}

#####################################################################
# Subroutine: run_ssdraw
# Incept:     EPN, Tue Oct 13 07:15:09 2009
# 
# Purpose:    Call esl-ssdraw for a given alignment and template file.
#             Convert the postscript to pdf if --ps2pdf is enabled.
#
# Arguments:
#   $ssdraw:              path and name of esl-alimanip/ssu-esl-alimanip executable
#   $template_file:       name of template file to use
#   $aln_file:            alignment file to draw
#   $ps_file:             output name for ps file
#   $pdf_file:            output name for pdf file
#   $ps2pdf:              if not "", use it to convert the ps to a pdf
#   $opt_HR:              REFERENCE to hash of command-line options
#   $log2printAR:         reference to log2print array with log file text
#
# Returns:    '1' if esl-ssdraw worked (exited cleanly (returned 0)), 
#             '0' if it did not work (returned non-0 value)
#             '-1' if we didn't even try to run it (if $ssdraw or $template_file were "" (not found by validate_and_setup()))
# 
####################################################################
sub run_ssdraw { 
    my $narg_expected = 8;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, run_ssdraw() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($ssdraw, $template_file, $aln_file, $ps_file, $pdf_file, $ps2pdf, $opt_HR, $log2printAR) = @_;

    # contract check
    if($opt_H{"--trunc"} eq "") { printf STDERR ("ERROR, run_ssdraw() entered, but -t option argument is the empty string. This shouldn't happen.\n"); exit(1); }
    if(! $opt_H{"-d"})          { printf STDERR ("ERROR, run_ssdraw() entered, but -d option argument not enabled. This shouldn't happen.\n"); exit(1); }
    if($ps_file eq "")          { printf STDERR ("ERROR, run_ssdraw() entered, but ps file is the empty string. This shouldn't happen.\n"); exit(1); }
    if($pdf_file eq "")         { printf STDERR ("ERROR, run_ssdraw() entered, but pdf file is the empty string. This shouldn't happen.\n"); exit(1); }

    if($ssdraw eq "")        { return -1; }
    if($template_file eq "") { return -1; }

    my($start, $end);
    if   ($opt_HR->{"--trunc"} =~ /(\d+)\-(\d+)/)  { $start = $1; $end   = $2; }
    elsif($opt_HR->{"--trunc"} =~ /(\d+)\:(\d+)/)  { $start = $1; $end   = $2; }
    elsif($opt_HR->{"--trunc"} =~ /(\d+)\.+(\d+)/) { $start = $1; $end   = $2; }

    #to determine consensus length, grep for the RF lines of the alignment, and overwrite them with 0s and 1s.
    my $command = "grep '^#=GC RF[[:space:]]' $aln_file";
    my $tmp = `$command`;
    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); } 
    $tmp =~ s/\#=GC RF\s+//g;
    $tmp =~ s/\n//g;
    $tmp =~ s/[\.\-\~]//g; #remove gaps ('.', '-', or '~')
    my $clen = length($tmp);

    #create the mask (a temporary file)
    my $mask_file = $ps_file . ".mask";
    my $i;
    open(MASK, ">" . $mask_file);
    for($i = 1;      $i < $start; $i++) { printf MASK ("0") };
    for($i = $start; $i <= $end;  $i++) { printf MASK ("1") };
    for($i = $end+1; $i <= $clen; $i++) { printf MASK ("0") };
    close(MASK);

    my $command = "$ssdraw --mask-col --mask $mask_file $aln_file $template_file $ps_file 2>&1";
    printf("run_ssdraw command: $command\n");
    my $tmp = `$command`;
    if(($? >> 8) != 0) { # it didn't work, don't exit just alert caller by returning 0
	# remove mask file
	$command = "rm $mask_file 2>&1";
	$tmp = `$command`;
	return 0; 
    } 
    $command = "rm $mask_file 2>&1";
    #$tmp = `$command`;
    #if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); } 

    push(@{$log2printAR}, sprintf("#\n"));
    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);

    # convert to pdf (if ps2pdf is in path) and print output file names 
    my ($max_width, $i, $dashes);
    if($ps2pdf ne "") { # convert to pdf
	$command = "ps2pdf $ps_file $pdf_file";
	$tmp = `$command`;
	if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); } 

	$max_width = length($pdf_file);
	if($opt_HR->{"--rm-ps"}) { 
	    if($max_width < length("pdf structure diagram file")) { $max_width = length("pdf structure diagram file"); }
	}
	else { 
	    if($max_width < length("pdf/postscript structure diagram file")) { $max_width = length("pdf/postscript structure diagram file"); }
	}
	$dashes = ""; for($i = 0; $i < $max_width; $i++) { $dashes .= "-"; }
	if($opt_HR->{"--rm-ps"}) { 
	    push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, "pdf structure diagram file"));
	    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	}
	else { 
	    push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, "pdf/postscript structure diagram file"));
	    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	}
	push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, $dashes));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	push(@{$log2printAR}, sprintf("  %-*s\n", $max_width, $pdf_file));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	if(!($opt_HR->{"--rm-ps"})) { 
	    push(@{$log2printAR}, sprintf("  %-*s\n", $max_width, $ps_file));
	    printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	}
	else { 
	    $command = "rm $ps_file 2>&1";
	    $tmp = `$command`;
	    if(($? >> 8) != 0) { printf STDERR ("\nERROR, the command \(\"$command\"\) unexpectedly returned non-zero exit status %d\nand output:\n$tmp\n", ($? >> 8)); exit($? >> 8); } 
	}
    }
    else { #ps2pdf is not in their path, print info on postscript
	$max_width = length($ps_file);
	if($max_width < length("postscript structure diagram file")) { $max_width = length("postscript structure diagram file"); }
	$dashes = ""; for($i = 0; $i < $max_width; $i++) { $dashes .= "-"; }
	push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, "postscript structure diagram file"));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	push(@{$log2printAR}, sprintf("# %-*s\n", $max_width, $dashes));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
	push(@{$log2printAR}, sprintf("  %-*s\n", $max_width, $ps_file));
	printf($log2printAR->[(scalar(@{$log2printAR})-1)]);
    }

    return 1; #if ssdraw failed we returned 0 above
}


#####################################################################
# Subroutine: print_log()
# Incept:     EPN, Tue Jun 16 09:23:55 2009
# 
# Purpose:    Print the log.
#
# Arguments:
#   $log_file:    file to print log to.
#   $log2printAR: reference to array, each element is line of text in log.
#
# Returns:    Nothing, if it returns, everything is valid.
# 
####################################################################
sub print_log { 
    my $narg_expected = 2;
    if(scalar(@_) != $narg_expected) { printf STDERR ("ERROR, print_log() entered with %d != %d input arguments.\n", scalar(@_), $narg_expected); exit(1); } 
    my ($log_file, $log2printAR) = @_;
    my ($start_log_line, $line);

    if(open(LOG,  ">" . $log_file) == 0) { printf STDERR ("ERROR, could not open $log_file for writing.\n"); exit(1); }
    foreach $line (@{$log2printAR}) { print LOG $line; }
    close(LOG);

    return;
}
